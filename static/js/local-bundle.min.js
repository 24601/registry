(()=>{"use strict";var t,e={997:(t,e,i)=>{function o(t,e,i,o){var s,n=arguments.length,r=n<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(n<3?s(r):n>3?s(e,i,r):s(e,i))||r);return n>3&&r&&Object.defineProperty(e,i,r),r}i.r(e),i.d(e,{accordion:()=>Un,accordionItem:()=>Wn,button:()=>Kn,card:()=>tr,checkbox:()=>cr,color:()=>Nn,combobox:()=>Dr,counter:()=>ir,disclosure:()=>Br,initDesignSystem:()=>aa,option:()=>jr,screen:()=>Ln,tab:()=>ea,tabPanel:()=>ia,tabs:()=>ta,type:()=>Dn});class s{createCSS(){return""}createBehavior(){}}const n=function(){if("undefined"!=typeof globalThis)return globalThis;if(void 0!==i.g)return i.g;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;try{return new Function("return this")()}catch(t){return{}}}();void 0===n.trustedTypes&&(n.trustedTypes={createPolicy:(t,e)=>e});const r=Object.freeze([]),a=[],l=n.trustedTypes.createPolicy("fast-html",{createHTML:t=>t});let c=l;const h=[];function d(){if(h.length)throw h.shift()}function u(t){try{t.call()}catch(t){h.push(t),setTimeout(d,0)}}function p(){let t=0;for(;t<a.length;)if(u(a[t]),t++,t>1024){for(let e=0,i=a.length-t;e<i;e++)a[e]=a[e+t];a.length-=t,t=0}a.length=0}const f=`fast-${Math.random().toString(36).substring(2,8)}`,g=`${f}{`,b=`}${f}`,m=Object.freeze({supportsAdoptedStyleSheets:Array.isArray(document.adoptedStyleSheets)&&"replace"in CSSStyleSheet.prototype,setHTMLPolicy(t){if(c!==l)throw new Error("The HTML policy can only be set once.");c=t},createHTML:t=>c.createHTML(t),isMarker:t=>t&&8===t.nodeType&&t.data.startsWith(f),extractDirectiveIndexFromMarker:t=>parseInt(t.data.replace(`${f}:`,"")),createInterpolationPlaceholder:t=>`${g}${t}${b}`,createCustomAttributePlaceholder(t,e){return`${t}="${this.createInterpolationPlaceholder(e)}"`},createBlockPlaceholder:t=>`\x3c!--${f}:${t}--\x3e`,queueUpdate(t){a.length<1&&window.requestAnimationFrame(p),a.push(t)},nextUpdate:()=>new Promise((t=>{m.queueUpdate(t)})),setAttribute(t,e,i){null==i?t.removeAttribute(e):t.setAttribute(e,i)},setBooleanAttribute(t,e,i){i?t.setAttribute(e,""):t.removeAttribute(e)},removeChildNodes(t){for(let e=t.firstChild;null!==e;e=t.firstChild)t.removeChild(e)},createTemplateWalker:t=>document.createTreeWalker(t,133,null,!1)});function v(t){const e=this.spillover;-1===e.indexOf(t)&&e.push(t)}function y(t){const e=this.spillover,i=e.indexOf(t);-1!==i&&e.splice(i,1)}function x(t){const e=this.spillover,i=this.source;for(let o=0,s=e.length;o<s;++o)e[o].handleChange(i,t)}function w(t){return-1!==this.spillover.indexOf(t)}class ${constructor(t,e){this.sub1=void 0,this.sub2=void 0,this.spillover=void 0,this.source=t,this.sub1=e}has(t){return this.sub1===t||this.sub2===t}subscribe(t){this.has(t)||(void 0!==this.sub1?void 0!==this.sub2?(this.spillover=[this.sub1,this.sub2,t],this.subscribe=v,this.unsubscribe=y,this.notify=x,this.has=w,this.sub1=void 0,this.sub2=void 0):this.sub2=t:this.sub1=t)}unsubscribe(t){this.sub1===t?this.sub1=void 0:this.sub2===t&&(this.sub2=void 0)}notify(t){const e=this.sub1,i=this.sub2,o=this.source;void 0!==e&&e.handleChange(o,t),void 0!==i&&i.handleChange(o,t)}}class C{constructor(t){this.subscribers={},this.sourceSubscribers=null,this.source=t}notify(t){var e;const i=this.subscribers[t];void 0!==i&&i.notify(t),null===(e=this.sourceSubscribers)||void 0===e||e.notify(t)}subscribe(t,e){var i;if(e){let i=this.subscribers[e];void 0===i&&(this.subscribers[e]=i=new $(this.source)),i.subscribe(t)}else this.sourceSubscribers=null!==(i=this.sourceSubscribers)&&void 0!==i?i:new $(this.source),this.sourceSubscribers.subscribe(t)}unsubscribe(t,e){var i;if(e){const i=this.subscribers[e];void 0!==i&&i.unsubscribe(t)}else null===(i=this.sourceSubscribers)||void 0===i||i.unsubscribe(t)}}const k=/(:|&&|\|\||if)/,I=new WeakMap,T=new WeakMap;let S,V=t=>{throw new Error("Must call enableArrayObservation before observing arrays.")};class O{constructor(t){this.name=t,this.field=`_${t}`,this.callback=`${t}Changed`}getValue(t){return void 0!==S&&S.watch(t,this.name),t[this.field]}setValue(t,e){const i=this.field,o=t[i];if(o!==e){t[i]=e;const s=t[this.callback];"function"==typeof s&&s.call(t,o,e),D(t).notify(this.name)}}}const F=Object.freeze({setArrayObserverFactory(t){V=t},getNotifier(t){let e=t.$fastController||I.get(t);return void 0===e&&(Array.isArray(t)?e=V(t):I.set(t,e=new C(t))),e},track(t,e){void 0!==S&&S.watch(t,e)},trackVolatile(){void 0!==S&&(S.needsRefresh=!0)},notify(t,e){D(t).notify(e)},defineProperty(t,e){"string"==typeof e&&(e=new O(e)),this.getAccessors(t).push(e),Reflect.defineProperty(t,e.name,{enumerable:!0,get:function(){return e.getValue(this)},set:function(t){e.setValue(this,t)}})},getAccessors(t){let e=T.get(t);if(void 0===e){let i=Reflect.getPrototypeOf(t);for(;void 0===e&&null!==i;)e=T.get(i),i=Reflect.getPrototypeOf(i);e=void 0===e?[]:e.slice(0),T.set(t,e)}return e},binding(t,e,i=this.isVolatileBinding(t)){return new E(t,e,i)},isVolatileBinding:t=>k.test(t.toString())}),D=F.getNotifier,A=(F.trackVolatile,m.queueUpdate);function N(t,e){F.defineProperty(t,e)}let P=null;function L(t){P=t}class M{constructor(){this.index=0,this.length=0,this.parent=null,this.parentContext=null}get event(){return P}get isEven(){return this.index%2==0}get isOdd(){return this.index%2!=0}get isFirst(){return 0===this.index}get isInMiddle(){return!this.isFirst&&!this.isLast}get isLast(){return this.index===this.length-1}}F.defineProperty(M.prototype,"index"),F.defineProperty(M.prototype,"length");const B=Object.seal(new M);class E extends ${constructor(t,e,i=!1){super(t,e),this.binding=t,this.isVolatileBinding=i,this.needsRefresh=!0,this.needsQueue=!0,this.first=this,this.last=null,this.propertySource=void 0,this.propertyName=void 0,this.notifier=void 0,this.next=void 0}observe(t,e){this.needsRefresh&&null!==this.last&&this.disconnect();const i=S;S=this.needsRefresh?this:void 0,this.needsRefresh=this.isVolatileBinding;const o=this.binding(t,e);return S=i,o}disconnect(){if(null!==this.last){let t=this.first;for(;void 0!==t;)t.notifier.unsubscribe(this,t.propertyName),t=t.next;this.last=null,this.needsRefresh=this.needsQueue=!0}}watch(t,e){const i=this.last,o=D(t),s=null===i?this.first:{};if(s.propertySource=t,s.propertyName=e,s.notifier=o,o.subscribe(this,e),null!==i){if(!this.needsRefresh){let e;S=void 0,e=i.propertySource[i.propertyName],S=this,t===e&&(this.needsRefresh=!0)}i.next=s}this.last=s}handleChange(){this.needsQueue&&(this.needsQueue=!1,A(this))}call(){null!==this.last&&(this.needsQueue=!0,this.notify(this))}records(){let t=this.first;return{next:()=>{const e=t;return void 0===e?{value:void 0,done:!0}:(t=t.next,{value:e,done:!1})},[Symbol.iterator]:function(){return this}}}}class H{constructor(){this.targets=new WeakSet,this.behaviors=null}addStylesTo(t){this.targets.add(t)}removeStylesFrom(t){this.targets.delete(t)}isAttachedTo(t){return this.targets.has(t)}withBehaviors(...t){return this.behaviors=null===this.behaviors?t:this.behaviors.concat(t),this}}function R(t){return t.map((t=>t instanceof H?R(t.styles):[t])).reduce(((t,e)=>t.concat(e)),[])}function j(t){return t.map((t=>t instanceof H?t.behaviors:null)).reduce(((t,e)=>null===e?t:(null===t&&(t=[]),t.concat(e))),null)}H.create=(()=>{if(m.supportsAdoptedStyleSheets){const t=new Map;return e=>new z(e,t)}return t=>new q(t)})();class z extends H{constructor(t,e){super(),this.styles=t,this.styleSheetCache=e,this._styleSheets=void 0,this.behaviors=j(t)}get styleSheets(){if(void 0===this._styleSheets){const t=this.styles,e=this.styleSheetCache;this._styleSheets=R(t).map((t=>{if(t instanceof CSSStyleSheet)return t;let i=e.get(t);return void 0===i&&(i=new CSSStyleSheet,i.replaceSync(t),e.set(t,i)),i}))}return this._styleSheets}addStylesTo(t){t.adoptedStyleSheets=[...t.adoptedStyleSheets,...this.styleSheets],super.addStylesTo(t)}removeStylesFrom(t){const e=this.styleSheets;t.adoptedStyleSheets=t.adoptedStyleSheets.filter((t=>-1===e.indexOf(t))),super.removeStylesFrom(t)}}let _=0;class q extends H{constructor(t){super(),this.styles=t,this.behaviors=null,this.behaviors=j(t),this.styleSheets=R(t),this.styleClass="fast-style-class-"+ ++_}addStylesTo(t){const e=this.styleSheets,i=this.styleClass;t=this.normalizeTarget(t);for(let o=0;o<e.length;o++){const s=document.createElement("style");s.innerHTML=e[o],s.className=i,t.append(s)}super.addStylesTo(t)}removeStylesFrom(t){const e=(t=this.normalizeTarget(t)).querySelectorAll(`.${this.styleClass}`);for(let i=0,o=e.length;i<o;++i)t.removeChild(e[i]);super.removeStylesFrom(t)}isAttachedTo(t){return super.isAttachedTo(this.normalizeTarget(t))}normalizeTarget(t){return t===document?document.body:t}}const G={toView:t=>t?"true":"false",fromView:t=>null!=t&&"false"!==t&&!1!==t&&0!==t},U={toView(t){if(null==t)return null;const e=1*t;return isNaN(e)?null:e.toString()},fromView(t){if(null==t)return null;const e=1*t;return isNaN(e)?null:e}};class W{constructor(t,e,i=e.toLowerCase(),o="reflect",s){this.guards=new Set,this.Owner=t,this.name=e,this.attribute=i,this.mode=o,this.converter=s,this.fieldName=`_${e}`,this.callbackName=`${e}Changed`,this.hasCallback=this.callbackName in t.prototype,"boolean"===o&&void 0===s&&(this.converter=G)}setValue(t,e){const i=t[this.fieldName],o=this.converter;void 0!==o&&(e=o.fromView(e)),i!==e&&(t[this.fieldName]=e,this.tryReflectToAttribute(t),this.hasCallback&&t[this.callbackName](i,e),t.$fastController.notify(this.name))}getValue(t){return F.track(t,this.name),t[this.fieldName]}onAttributeChangedCallback(t,e){this.guards.has(t)||(this.guards.add(t),this.setValue(t,e),this.guards.delete(t))}tryReflectToAttribute(t){const e=this.mode,i=this.guards;i.has(t)||"fromView"===e||m.queueUpdate((()=>{i.add(t);const o=t[this.fieldName];switch(e){case"reflect":const e=this.converter;m.setAttribute(t,this.attribute,void 0!==e?e.toView(o):o);break;case"boolean":m.setBooleanAttribute(t,this.attribute,o)}i.delete(t)}))}static collect(t,...e){const i=[];e.push(t.attributes);for(let o=0,s=e.length;o<s;++o){const s=e[o];if(void 0!==s)for(let e=0,o=s.length;e<o;++e){const o=s[e];"string"==typeof o?i.push(new W(t,o)):i.push(new W(t,o.property,o.attribute,o.mode,o.converter))}}return i}}function K(t,e){let i;function o(t,e){arguments.length>1&&(i.property=e);const o=t.constructor.attributes||(t.constructor.attributes=[]);o.push(i)}return arguments.length>1?(i={},void o(t,e)):(i=void 0===t?{}:t,o)}const Y={mode:"open"},Q={},X=new Map;class Z{constructor(t,e=t.definition){"string"==typeof e&&(e={name:e}),this.type=t,this.name=e.name,this.template=e.template;const i=W.collect(t,e.attributes),o=new Array(i.length),s={},n={};for(let t=0,e=i.length;t<e;++t){const e=i[t];o[t]=e.attribute,s[e.name]=e,n[e.attribute]=e}this.attributes=i,this.observedAttributes=o,this.propertyLookup=s,this.attributeLookup=n,this.shadowOptions=void 0===e.shadowOptions?Y:null===e.shadowOptions?void 0:Object.assign(Object.assign({},Y),e.shadowOptions),this.elementOptions=void 0===e.elementOptions?Q:Object.assign(Object.assign({},Q),e.elementOptions),this.styles=void 0===e.styles?void 0:Array.isArray(e.styles)?H.create(e.styles):e.styles instanceof H?e.styles:H.create([e.styles])}define(t=customElements){const e=this.type;if(!this.isDefined){const t=this.attributes,i=e.prototype;for(let e=0,o=t.length;e<o;++e)F.defineProperty(i,t[e]);Reflect.defineProperty(e,"observedAttributes",{value:this.observedAttributes,enumerable:!0}),X.set(e,this),this.isDefined=!0}return t.get(this.name)||t.define(this.name,e,this.elementOptions),this}static forType(t){return X.get(t)}}const J=new WeakMap,tt={bubbles:!0,composed:!0,cancelable:!0};function et(t){return t.shadowRoot||J.get(t)||null}class it extends C{constructor(t,e){super(t),this.boundObservables=null,this.behaviors=null,this.needsInitialization=!0,this._template=null,this._styles=null,this._isConnected=!1,this.view=null,this.element=t,this.definition=e;const i=e.shadowOptions;if(void 0!==i){const e=t.attachShadow(i);"closed"===i.mode&&J.set(t,e)}const o=F.getAccessors(t);if(o.length>0){const e=this.boundObservables=Object.create(null);for(let i=0,s=o.length;i<s;++i){const s=o[i].name,n=t[s];void 0!==n&&(delete t[s],e[s]=n)}}}get isConnected(){return F.track(this,"isConnected"),this._isConnected}setIsConnected(t){this._isConnected=t,F.notify(this,"isConnected")}get template(){return this._template}set template(t){this._template!==t&&(this._template=t,this.needsInitialization||this.renderTemplate(t))}get styles(){return this._styles}set styles(t){this._styles!==t&&(null!==this._styles&&this.removeStyles(this._styles),this._styles=t,this.needsInitialization||null===t||this.addStyles(t))}addStyles(t){const e=et(this.element)||this.element.getRootNode();if(t instanceof HTMLStyleElement)e.append(t);else if(!t.isAttachedTo(e)){const i=t.behaviors;t.addStylesTo(e),null!==i&&this.addBehaviors(i)}}removeStyles(t){const e=et(this.element)||this.element.getRootNode();if(t instanceof HTMLStyleElement)e.removeChild(t);else if(t.isAttachedTo(e)){const i=t.behaviors;t.removeStylesFrom(e),null!==i&&this.removeBehaviors(i)}}addBehaviors(t){const e=this.behaviors||(this.behaviors=new Map),i=t.length,o=[];for(let s=0;s<i;++s){const i=t[s];e.has(i)?e.set(i,e.get(i)+1):(e.set(i,1),o.push(i))}if(this._isConnected){const t=this.element;for(let e=0;e<o.length;++e)o[e].bind(t,B)}}removeBehaviors(t,e=!1){const i=this.behaviors;if(null===i)return;const o=t.length,s=[];for(let n=0;n<o;++n){const o=t[n];if(i.has(o)){const t=i.get(o)-1;0===t||e?i.delete(o)&&s.push(o):i.set(o,t)}}if(this._isConnected){const t=this.element;for(let e=0;e<s.length;++e)s[e].unbind(t)}}onConnectedCallback(){if(this._isConnected)return;const t=this.element;this.needsInitialization?this.finishInitialization():null!==this.view&&this.view.bind(t,B);const e=this.behaviors;if(null!==e)for(const[i]of e)i.bind(t,B);this.setIsConnected(!0)}onDisconnectedCallback(){if(!this._isConnected)return;this.setIsConnected(!1);const t=this.view;null!==t&&t.unbind();const e=this.behaviors;if(null!==e){const t=this.element;for(const[i]of e)i.unbind(t)}}onAttributeChangedCallback(t,e,i){const o=this.definition.attributeLookup[t];void 0!==o&&o.onAttributeChangedCallback(this.element,i)}emit(t,e,i){return!!this._isConnected&&this.element.dispatchEvent(new CustomEvent(t,Object.assign(Object.assign({detail:e},tt),i)))}finishInitialization(){const t=this.element,e=this.boundObservables;if(null!==e){const i=Object.keys(e);for(let o=0,s=i.length;o<s;++o){const s=i[o];t[s]=e[s]}this.boundObservables=null}const i=this.definition;null===this._template&&(this.element.resolveTemplate?this._template=this.element.resolveTemplate():i.template&&(this._template=i.template||null)),null!==this._template&&this.renderTemplate(this._template),null===this._styles&&(this.element.resolveStyles?this._styles=this.element.resolveStyles():i.styles&&(this._styles=i.styles||null)),null!==this._styles&&this.addStyles(this._styles),this.needsInitialization=!1}renderTemplate(t){const e=this.element,i=et(e)||e;null!==this.view?(this.view.dispose(),this.view=null):this.needsInitialization||m.removeChildNodes(i),t&&(this.view=t.render(e,i,e))}static forCustomElement(t){const e=t.$fastController;if(void 0!==e)return e;const i=Z.forType(t.constructor);if(void 0===i)throw new Error("Missing FASTElement definition.");return t.$fastController=new it(t,i)}}function ot(t){return class extends t{constructor(){super(),it.forCustomElement(this)}$emit(t,e,i){return this.$fastController.emit(t,e,i)}connectedCallback(){this.$fastController.onConnectedCallback()}disconnectedCallback(){this.$fastController.onDisconnectedCallback()}attributeChangedCallback(t,e,i){this.$fastController.onAttributeChangedCallback(t,e,i)}}}const st=Object.assign(ot(HTMLElement),{from:t=>ot(t),define:(t,e)=>new Z(t,e).define().type});function nt(t){const e=t.parentElement;if(e)return e;{const e=t.getRootNode();if(e.host instanceof HTMLElement)return e.host}return null}function rt(t,e){const i=[];let o="";const n=[];for(let r=0,a=t.length-1;r<a;++r){o+=t[r];let a=e[r];if(a instanceof s){const t=a.createBehavior();a=a.createCSS(),t&&n.push(t)}a instanceof H||a instanceof CSSStyleSheet?(""!==o.trim()&&(i.push(o),o=""),i.push(a)):o+=a}return o+=t[t.length-1],""!==o.trim()&&i.push(o),{styles:i,behaviors:n}}function at(t,...e){const{styles:i,behaviors:o}=rt(t,e),s=H.create(i);return o.length&&s.withBehaviors(...o),s}class lt extends s{constructor(t,e){super(),this.behaviors=e,this.css="";const i=t.reduce(((t,e)=>("string"==typeof e?this.css+=e:t.push(e),t)),[]);i.length&&(this.styles=H.create(i))}createBehavior(){return this}createCSS(){return this.css}bind(t){this.styles&&t.$fastController.addStyles(this.styles),this.behaviors.length&&t.$fastController.addBehaviors(this.behaviors)}unbind(t){this.styles&&t.$fastController.removeStyles(this.styles),this.behaviors.length&&t.$fastController.removeBehaviors(this.behaviors)}}class ct{getElementStyles(t,e){let i=ct.cache.get(t.cssCustomProperty);i||(i=new Map,ct.cache.set(t.cssCustomProperty,i));let o=i.get(e);return o||(o=this.createElementStyles(t,e),i.set(e,o)),o}getOrCreateAppliedCache(t){return(ct.appliedCache.has(t)||ct.appliedCache.set(t,new Map))&&ct.appliedCache.get(t)}createElementStyles(t,e){return at`:host{${t.cssCustomProperty}:${e};}`}addTo(t,e,i){if(ht(t)){const o=this.getElementStyles(e,i);t.$fastController.addStyles(o),this.getOrCreateAppliedCache(t).set(e.cssCustomProperty,o)}else m.queueUpdate((()=>t.style.setProperty(e.cssCustomProperty,i)))}removeFrom(t,e){if(ht(t)){const i=this.getOrCreateAppliedCache(t),o=i.get(e.cssCustomProperty);o&&(t.$fastController.removeStyles(o),i.delete(e.cssCustomProperty))}else m.queueUpdate((()=>t.style.removeProperty(e.cssCustomProperty)))}}function ht(t){return t instanceof st}ct.cache=new Map,ct.appliedCache=new WeakMap;const dt=new ct,ut=document.body;class pt extends s{constructor(t){super(),this.subscribers=new WeakMap,this._appliedTo=new Set,this.name=t.name,null!==t.cssCustomPropertyName&&(this.cssCustomProperty=`--${t.cssCustomPropertyName}`,this.cssVar=`var(${this.cssCustomProperty})`),this.id=pt.uniqueId(),pt.tokensById.set(this.id,this),this.subscribe(this)}get appliedTo(){return[...this._appliedTo]}static from(t){return new pt({name:"string"==typeof t?t:t.name,cssCustomPropertyName:"string"==typeof t?t:void 0===t.cssCustomPropertyName?t.name:t.cssCustomPropertyName})}static isCSSDesignToken(t){return"string"==typeof t.cssCustomProperty}static isDerivedDesignTokenValue(t){return"function"==typeof t}static getTokenById(t){return pt.tokensById.get(t)}getOrCreateSubscriberSet(t=this){return this.subscribers.get(t)||this.subscribers.set(t,new Set)&&this.subscribers.get(t)}createCSS(){return this.cssVar||""}getValueFor(t){const e=mt.getOrCreate(t).get(this);if(void 0!==e)return e;throw new Error(`Value could not be retrieved for token named "${this.name}". Ensure the value is set for ${t} or an ancestor of ${t}.`)}setValueFor(t,e){return this._appliedTo.add(t),e instanceof pt&&(e=this.alias(e)),mt.getOrCreate(t).set(this,e),this}deleteValueFor(t){return this._appliedTo.delete(t),mt.existsFor(t)&&mt.getOrCreate(t).delete(this),this}withDefault(t){return this.setValueFor(ut,t),this}subscribe(t,e){const i=this.getOrCreateSubscriberSet(e);i.has(t)||i.add(t)}unsubscribe(t,e){const i=this.subscribers.get(e||this);i&&i.has(t)&&i.delete(t)}notify(t){const e=Object.freeze({token:this,target:t});this.subscribers.has(this)&&this.subscribers.get(this).forEach((t=>t.handleChange(e))),this.subscribers.has(t)&&this.subscribers.get(t).forEach((t=>t.handleChange(e)))}handleChange(t){const e=mt.getOrCreate(t.target);F.getNotifier(e).notify(t.token.id)}alias(t){return e=>t.getValueFor(e)}}pt.uniqueId=(()=>{let t=0;return()=>(t++,t.toString(16))})(),pt.tokensById=new Map;class ft{constructor(t,e,i){this.source=t,this.token=e,this.node=i,this.dependencies=new Set,this.observer=F.binding(t,this),this.observer.handleChange=this.observer.call,this.handleChange();for(const t of this.observer.records()){const{propertySource:e}=t;if(e instanceof mt){const e=pt.getTokenById(t.propertyName);void 0!==e&&e!==this.token&&this.dependencies.add(e)}}}disconnect(){this.observer.disconnect()}_valueChanged(t,e){void 0!==t&&this.token.notify(this.node.target)}get value(){return this._value}handleChange(){this._value=this.observer.observe(this.node.target,B)}}o([N],ft.prototype,"_value",void 0);const gt=new WeakMap,bt=new WeakMap;class mt{constructor(t){this.target=t,this.children=[],this.rawValues=new Map,this.reflecting=new Set,this.bindingObservers=new Map,this.tokenSubscribers=new Map,gt.set(t,this),t instanceof st?t.$fastController.addBehaviors([this]):t.isConnected&&this.bind()}static getOrCreate(t){return gt.get(t)||new mt(t)}static existsFor(t){return gt.has(t)}static findParent(t){if(ut!==t.target){let e=nt(t.target);for(;null!==e;){if(gt.has(e))return gt.get(e);e=nt(e)}return mt.getOrCreate(ut)}return null}static findClosestAssignedNode(t,e){let i=e;do{if(i.has(t))return i;i=i.parent?i.parent:i.target!==ut?mt.getOrCreate(ut):null}while(null!==i);return null}get parent(){return bt.get(this)||null}has(t){return this.rawValues.has(t)}get(t){const e=this.getRaw(t);if(F.track(this,t.id),void 0!==e)return pt.isDerivedDesignTokenValue(e)?(this.bindingObservers.get(t)||this.setupBindingObserver(t,e)).value:e}getRaw(t){var e;return this.rawValues.has(t)?this.rawValues.get(t):null===(e=mt.findClosestAssignedNode(t,this))||void 0===e?void 0:e.getRaw(t)}set(t,e){if(pt.isDerivedDesignTokenValue(this.rawValues.get(t))&&(this.tearDownBindingObserver(t),this.children.forEach((e=>e.purgeInheritedBindings(t)))),this.rawValues.set(t,e),this.tokenSubscribers.has(t)&&(t.unsubscribe(this.tokenSubscribers.get(t)),this.tokenSubscribers.delete(t)),pt.isDerivedDesignTokenValue(e)){const i=this.setupBindingObserver(t,e),{dependencies:o}=i,s=pt.isCSSDesignToken(t);if(o.size>0){const i={handleChange:e=>{const i=mt.getOrCreate(e.target);this!==i&&this.contains(i)&&(t.notify(e.target),mt.getOrCreate(e.target).reflectToCSS(t))}};this.tokenSubscribers.set(t,i),o.forEach((o=>{s&&o.appliedTo.forEach((i=>{const o=mt.getOrCreate(i);this.contains(o)&&o.getRaw(t)===e&&(t.notify(o.target),o.reflectToCSS(t))})),o.subscribe(i)}))}}pt.isCSSDesignToken(t)&&this.reflectToCSS(t),t.notify(this.target)}delete(t){this.rawValues.delete(t),this.tearDownBindingObserver(t),this.children.forEach((e=>e.purgeInheritedBindings(t))),t.notify(this.target)}bind(){const t=mt.findParent(this);t&&t.appendChild(this);for(const t of this.rawValues.keys())t.notify(this.target)}unbind(){this.parent&&bt.get(this).removeChild(this)}appendChild(t){t.parent&&bt.get(t).removeChild(t);const e=this.children.filter((e=>t.contains(e)));bt.set(t,this),this.children.push(t),e.forEach((e=>t.appendChild(e))),F.getNotifier(this).subscribe(t)}removeChild(t){const e=this.children.indexOf(t);return-1!==e&&this.children.splice(e,1),F.getNotifier(this).unsubscribe(t),t.parent===this&&bt.delete(t)}contains(t){return function(t,e){let i=e;for(;null!==i;){if(i===t)return!0;i=nt(i)}return!1}(this.target,t.target)}reflectToCSS(t){this.reflecting.has(t)||(this.reflecting.add(t),mt.cssCustomPropertyReflector.startReflection(t,this.target))}handleChange(t,e){const i=pt.getTokenById(e);!i||this.has(i)||this.bindingObservers.has(i)||i.notify(this.target)}purgeInheritedBindings(t){this.has(t)||(this.tearDownBindingObserver(t),this.children.length&&this.children.forEach((e=>e.purgeInheritedBindings(t))))}setupBindingObserver(t,e){const i=new ft(e,t,this);return this.bindingObservers.set(t,i),i}tearDownBindingObserver(t){return!!this.bindingObservers.has(t)&&(this.bindingObservers.get(t).disconnect(),this.bindingObservers.delete(t),!0)}}mt.cssCustomPropertyReflector=new class{startReflection(t,e){t.subscribe(this,e),this.handleChange({token:t,target:e})}stopReflection(t,e){t.unsubscribe(this,e),this.remove(t,e)}handleChange(t){const{token:e,target:i}=t;this.remove(e,i),this.add(e,i)}add(t,e){dt.addTo(e,t,this.resolveCSSValue(mt.getOrCreate(e).get(t)))}remove(t,e){dt.removeFrom(e,t)}resolveCSSValue(t){return t&&"function"==typeof t.createCSS?t.createCSS():t}},o([N],mt.prototype,"children",void 0);const vt=Object.freeze({create:function(t){return pt.from(t)},notifyConnection:t=>!(!t.isConnected||!mt.existsFor(t)||(mt.getOrCreate(t).bind(),0)),notifyDisconnection:t=>!(t.isConnected||!mt.existsFor(t)||(mt.getOrCreate(t).unbind(),0))}),yt=new Map;"metadata"in Reflect||(Reflect.metadata=function(t,e){return function(i){Reflect.defineMetadata(t,e,i)}},Reflect.defineMetadata=function(t,e,i){let o=yt.get(i);void 0===o&&yt.set(i,o=new Map),o.set(t,e)},Reflect.getOwnMetadata=function(t,e){const i=yt.get(e);if(void 0!==i)return i.get(t)});class xt{constructor(t,e){this.container=t,this.key=e}instance(t){return this.registerResolver(0,t)}singleton(t){return this.registerResolver(1,t)}transient(t){return this.registerResolver(2,t)}callback(t){return this.registerResolver(3,t)}cachedCallback(t){return this.registerResolver(3,qt(t))}aliasTo(t){return this.registerResolver(5,t)}registerResolver(t,e){const{container:i,key:o}=this;return this.container=this.key=void 0,i.registerResolver(o,new At(o,t,e))}}function wt(t){const e=t.slice(),i=Object.keys(t),o=i.length;let s;for(let n=0;n<o;++n)s=i[n],Zt(s)||(e[s]=t[s]);return e}const $t=Object.freeze({none(t){throw Error(`${t.toString()} not registered, did you forget to add @singleton()?`)},singleton:t=>new At(t,1,t),transient:t=>new At(t,2,t)}),Ct=Object.freeze({default:Object.freeze({parentLocator:()=>null,responsibleForOwnerRequests:!1,defaultResolver:$t.singleton})}),kt=new Map;function It(t){return e=>Reflect.getOwnMetadata(t,e)}const Tt=Object.freeze({createContainer:t=>new zt(null,Object.assign({},Ct.default,t)),findResponsibleContainer(t){const e=t.$$container$$;return e&&e.responsibleForOwnerRequests?e:Tt.findParentContainer(t)},findParentContainer(t){const e=new CustomEvent(Rt,{bubbles:!0,composed:!0,cancelable:!0,detail:{container:void 0}});return t.dispatchEvent(e),e.detail.container||Tt.getOrCreateDOMContainer()},getOrCreateDOMContainer:(t=document.body,e)=>t.$$container$$||new zt(t,Object.assign({},Ct.default,e,{parentLocator:t===document.body?()=>null:Tt.findParentContainer})),getDesignParamtypes:It("design:paramtypes"),getAnnotationParamtypes:It("di:paramtypes"),getOrCreateAnnotationParamTypes(t){let e=this.getAnnotationParamtypes(t);return void 0===e&&Reflect.defineMetadata("di:paramtypes",e=[],t),e},getDependencies(t){let e=kt.get(t);if(void 0===e){const i=t.inject;if(void 0===i){const i=Tt.getDesignParamtypes(t),o=Tt.getAnnotationParamtypes(t);if(void 0===i)if(void 0===o){const i=Object.getPrototypeOf(t);e="function"==typeof i&&i!==Function.prototype?wt(Tt.getDependencies(i)):[]}else e=wt(o);else if(void 0===o)e=wt(i);else{e=wt(i);let t,s=o.length;for(let i=0;i<s;++i)t=o[i],void 0!==t&&(e[i]=t);const n=Object.keys(o);let r;s=n.length;for(let t=0;t<s;++t)r=n[t],Zt(r)||(e[r]=o[r])}}else e=wt(i);kt.set(t,e)}return e},defineProperty(t,e,i,o=!1){const s=`$di_${e}`;Reflect.defineProperty(t,e,{get:function(){let t=this[s];if(void 0===t){const n=this instanceof HTMLElement?Tt.findResponsibleContainer(this):Tt.getOrCreateDOMContainer();if(t=n.get(i),this[s]=t,o&&this instanceof st){const o=this.$fastController,n=()=>{Tt.findResponsibleContainer(this).get(i)!==this[s]&&(this[s]=t,o.notify(e))};o.subscribe({handleChange:n},"isConnected")}}return t}})},createInterface(t,e){const i="function"==typeof t?t:e,o="string"==typeof t?t:t&&"friendlyName"in t&&t.friendlyName||Kt,s="string"!=typeof t&&(t&&"respectConnection"in t&&t.respectConnection||!1),n=function(t,e,i){if(null==t||void 0!==new.target)throw new Error(`No registration for interface: '${n.friendlyName}'`);e?Tt.defineProperty(t,e,n,s):Tt.getOrCreateAnnotationParamTypes(t)[i]=n};return n.$isInterface=!0,n.friendlyName=null==o?"(anonymous)":o,null!=i&&(n.register=function(t,e){return i(new xt(t,null!=e?e:n))}),n.toString=function(){return`InterfaceSymbol<${n.friendlyName}>`},n},inject:(...t)=>function(e,i,o){if("number"==typeof o){const i=Tt.getOrCreateAnnotationParamTypes(e),s=t[0];void 0!==s&&(i[o]=s)}else if(i)Tt.defineProperty(e,i,t[0]);else{const i=o?Tt.getOrCreateAnnotationParamTypes(o.value):Tt.getOrCreateAnnotationParamTypes(e);let s;for(let e=0;e<t.length;++e)s=t[e],void 0!==s&&(i[e]=s)}},transient:t=>(t.register=function(e){return Gt.transient(t,t).register(e,t)},t.registerInRequestor=!1,t),singleton:(t,e=Ot)=>(t.register=function(e){return Gt.singleton(t,t).register(e,t)},t.registerInRequestor=e.scoped,t)}),St=Tt.createInterface("Container");function Vt(t){return function(e){const i=function(t,e,o){Tt.inject(i)(t,e,o)};return i.$isResolver=!0,i.resolve=function(i,o){return t(e,i,o)},i}}Tt.inject;const Ot={scoped:!1};function Ft(t,e,i){Tt.inject(Ft)(t,e,i)}function Dt(t,e){return e.getFactory(t).construct(e)}Vt(((t,e,i)=>()=>i.get(t))),Vt(((t,e,i)=>i.has(t,!0)?i.get(t):void 0)),Ft.$isResolver=!0,Ft.resolve=()=>{},Vt(((t,e,i)=>{const o=Dt(t,e),s=new At(t,0,o);return i.registerResolver(t,s),o})),Vt(((t,e,i)=>Dt(t,e)));class At{constructor(t,e,i){this.key=t,this.strategy=e,this.state=i,this.resolving=!1}get $isResolver(){return!0}register(t,e){return t.registerResolver(e||this.key,this)}resolve(t,e){switch(this.strategy){case 0:return this.state;case 1:if(this.resolving)throw new Error(`Cyclic dependency found: ${this.state.name}`);return this.resolving=!0,this.state=t.getFactory(this.state).construct(e),this.strategy=0,this.resolving=!1,this.state;case 2:{const i=t.getFactory(this.state);if(null===i)throw new Error(`Resolver for ${String(this.key)} returned a null factory`);return i.construct(e)}case 3:return this.state(t,e,this);case 4:return this.state[0].resolve(t,e);case 5:return e.get(this.state);default:throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`)}}getFactory(t){var e,i,o;switch(this.strategy){case 1:case 2:return t.getFactory(this.state);case 5:return null!==(o=null===(i=null===(e=t.getResolver(this.state))||void 0===e?void 0:e.getFactory)||void 0===i?void 0:i.call(e,t))&&void 0!==o?o:null;default:return null}}}function Nt(t){return this.get(t)}function Pt(t,e){return e(t)}class Lt{constructor(t,e){this.Type=t,this.dependencies=e,this.transformers=null}construct(t,e){let i;return i=void 0===e?new this.Type(...this.dependencies.map(Nt,t)):new this.Type(...this.dependencies.map(Nt,t),...e),null==this.transformers?i:this.transformers.reduce(Pt,i)}registerTransformer(t){(this.transformers||(this.transformers=[])).push(t)}}const Mt={$isResolver:!0,resolve:(t,e)=>e};function Bt(t){return"function"==typeof t.register}function Et(t){return function(t){return Bt(t)&&"boolean"==typeof t.registerInRequestor}(t)&&t.registerInRequestor}const Ht=new Set(["Array","ArrayBuffer","Boolean","DataView","Date","Error","EvalError","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Number","Object","Promise","RangeError","ReferenceError","RegExp","Set","SharedArrayBuffer","String","SyntaxError","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","URIError","WeakMap","WeakSet"]),Rt="__DI_LOCATE_PARENT__",jt=new Map;class zt{constructor(t,e){this.owner=t,this.config=e,this._parent=void 0,this.registerDepth=0,null!==t&&(t.$$container$$=this),this.resolvers=new Map,this.resolvers.set(St,Mt),t instanceof Node&&t.addEventListener(Rt,(t=>{t.composedPath()[0]!==this.owner&&(t.detail.container=this,t.stopImmediatePropagation())}))}get parent(){return void 0===this._parent&&(this._parent=this.config.parentLocator(this.owner)),this._parent}get depth(){return null===this.parent?0:this.parent.depth+1}get responsibleForOwnerRequests(){return this.config.responsibleForOwnerRequests}register(...t){if(100==++this.registerDepth)throw new Error("Unable to autoregister dependency");let e,i,o,s,n;for(let r=0,a=t.length;r<a;++r)if(e=t[r],Yt(e))if(Bt(e))e.register(this);else if(void 0!==e.prototype)Gt.singleton(e,e).register(this);else for(i=Object.keys(e),s=0,n=i.length;s<n;++s)o=e[i[s]],Yt(o)&&(Bt(o)?o.register(this):this.register(o));return--this.registerDepth,this}registerResolver(t,e){Ut(t);const i=this.resolvers,o=i.get(t);return null==o?i.set(t,e):o instanceof At&&4===o.strategy?o.state.push(e):i.set(t,new At(t,4,[o,e])),e}registerTransformer(t,e){const i=this.getResolver(t);if(null==i)return!1;if(i.getFactory){const t=i.getFactory(this);return null!=t&&(t.registerTransformer(e),!0)}return!1}getResolver(t,e=!0){if(Ut(t),void 0!==t.resolve)return t;let i,o=this;for(;null!=o;){if(i=o.resolvers.get(t),null!=i)return i;if(null==o.parent){const i=Et(t)?this:o;return e?this.jitRegister(t,i):null}o=o.parent}return null}has(t,e=!1){return!!this.resolvers.has(t)||!(!e||null==this.parent)&&this.parent.has(t,!0)}get(t){if(Ut(t),t.$isResolver)return t.resolve(this,this);let e,i=this;for(;null!=i;){if(e=i.resolvers.get(t),null!=e)return e.resolve(i,this);if(null==i.parent){const o=Et(t)?this:i;return e=this.jitRegister(t,o),e.resolve(i,this)}i=i.parent}throw new Error(`Unable to resolve key: ${t}`)}getAll(t,e=!1){Ut(t);const i=this;let o,s=i;if(e){let e=r;for(;null!=s;)o=s.resolvers.get(t),null!=o&&(e=e.concat(Wt(o,s,i))),s=s.parent;return e}for(;null!=s;){if(o=s.resolvers.get(t),null!=o)return Wt(o,s,i);if(s=s.parent,null==s)return r}return r}getFactory(t){let e=jt.get(t);if(void 0===e){if(Qt(t))throw new Error(`${t.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);jt.set(t,e=new Lt(t,Tt.getDependencies(t)))}return e}registerFactory(t,e){jt.set(t,e)}createChild(t){return new zt(null,Object.assign({},this.config,t,{parentLocator:()=>this}))}jitRegister(t,e){if("function"!=typeof t)throw new Error(`Attempted to jitRegister something that is not a constructor: '${t}'. Did you forget to register this dependency?`);if(Ht.has(t.name))throw new Error(`Attempted to jitRegister an intrinsic type: ${t.name}. Did you forget to add @inject(Key)`);if(Bt(t)){const i=t.register(e,t);if(!(i instanceof Object)||null==i.resolve){const i=e.resolvers.get(t);if(null!=i)return i;throw new Error("A valid resolver was not returned from the static register method")}return i}if(t.$isInterface)throw new Error(`Attempted to jitRegister an interface: ${t.friendlyName}`);{const i=this.config.defaultResolver(t,e);return e.resolvers.set(t,i),i}}}const _t=new WeakMap;function qt(t){return function(e,i,o){if(_t.has(o))return _t.get(o);const s=t(e,i,o);return _t.set(o,s),s}}const Gt=Object.freeze({instance:(t,e)=>new At(t,0,e),singleton:(t,e)=>new At(t,1,e),transient:(t,e)=>new At(t,2,e),callback:(t,e)=>new At(t,3,e),cachedCallback:(t,e)=>new At(t,3,qt(e)),aliasTo:(t,e)=>new At(e,5,t)});function Ut(t){if(null==t)throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?")}function Wt(t,e,i){if(t instanceof At&&4===t.strategy){const o=t.state;let s=o.length;const n=new Array(s);for(;s--;)n[s]=o[s].resolve(e,i);return n}return[t.resolve(e,i)]}const Kt="(anonymous)";function Yt(t){return"object"==typeof t&&null!==t||"function"==typeof t}const Qt=function(){const t=new WeakMap;let e=!1,i="",o=0;return function(s){return e=t.get(s),void 0===e&&(i=s.toString(),o=i.length,e=o>=29&&o<=100&&125===i.charCodeAt(o-1)&&i.charCodeAt(o-2)<=32&&93===i.charCodeAt(o-3)&&101===i.charCodeAt(o-4)&&100===i.charCodeAt(o-5)&&111===i.charCodeAt(o-6)&&99===i.charCodeAt(o-7)&&32===i.charCodeAt(o-8)&&101===i.charCodeAt(o-9)&&118===i.charCodeAt(o-10)&&105===i.charCodeAt(o-11)&&116===i.charCodeAt(o-12)&&97===i.charCodeAt(o-13)&&110===i.charCodeAt(o-14)&&88===i.charCodeAt(o-15),t.set(s,e)),e}}(),Xt={};function Zt(t){switch(typeof t){case"number":return t>=0&&(0|t)===t;case"string":{const e=Xt[t];if(void 0!==e)return e;const i=t.length;if(0===i)return Xt[t]=!1;let o=0;for(let e=0;e<i;++e)if(o=t.charCodeAt(e),0===e&&48===o&&i>1||o<48||o>57)return Xt[t]=!1;return Xt[t]=!0}default:return!1}}function Jt(t){return`${t.toLowerCase()}:presentation`}const te=new Map,ee=Object.freeze({define(t,e,i){const o=Jt(t);void 0===te.get(o)?te.set(o,e):te.set(o,!1),i.register(Gt.instance(o,e))},forTag(t,e){const i=Jt(t),o=te.get(i);return!1===o?Tt.findResponsibleContainer(e).get(i):o||null}});class ie{constructor(t,e){this.template=t||null,this.styles=void 0===e?null:Array.isArray(e)?H.create(e):e instanceof H?e:H.create([e])}applyTo(t){const e=t.$fastController;null===e.template&&(e.template=this.template),null===e.styles&&(e.styles=this.styles)}}const oe=Tt.createInterface(),se=new Map,ne=new Map,re=Tt.createInterface((t=>t.cachedCallback((t=>{const e=document.body;return e.$$designSystem$$||new le(e,t)})))),ae=Object.freeze({tagFor:t=>ne.get(t),responsibleFor(t){const e=t.$$designSystem$$;return e||Tt.findResponsibleContainer(t).get(re)},getOrCreate(t=document.body){const e=t.$$designSystem$$;if(e)return e;const i=Tt.getOrCreateDOMContainer(t);return i.has(re,!1)||i.register(Gt.instance(re,new le(t,i))),i.get(re)}});class le{constructor(t,e){this.host=t,this.container=e,this.prefix="fast",this.shadowRootMode=void 0,this.disambiguate=()=>null,t.$$designSystem$$=this,e.register(Gt.callback(oe,(()=>this.context)))}withPrefix(t){return this.prefix=t,this}withShadowRootMode(t){return this.shadowRootMode=t,this}withElementDisambiguation(t){return this.disambiguate=t,this}register(...t){const e=this.container,i=[],o=this.disambiguate,s=this.shadowRootMode;this.context={elementPrefix:this.prefix,tryDefineElement(t,n,r){let a=t,l=se.get(a);for(;l&&a;)a=o(a,n,l),a&&(l=se.get(a));const c=!!a;c&&(ne.has(n)&&(n=class extends n{}),se.set(a,n),ne.set(n,a)),i.push(new ce(e,a||t,n,s,r,c))}},e.register(...t);for(const t of i)t.callback(t),t.willDefine&&null!==t.definition&&t.definition.define();return this}}class ce{constructor(t,e,i,o,s,n){this.container=t,this.name=e,this.type=i,this.shadowRootMode=o,this.callback=s,this.willDefine=n,this.definition=null}definePresentation(t){ee.define(this.name,t,this.container)}defineElement(t){this.definition=new Z(this.type,Object.assign(Object.assign({},t),{name:this.name}))}tagFor(t){return ae.tagFor(t)}}function he(t,e,i){return isNaN(t)||t<=e?e:t>=i?i:t}function de(t,e,i){return isNaN(t)||t<=e?0:t>=i?1:t/(i-e)}function ue(t,e,i){return isNaN(t)?e:e+t*(i-e)}function pe(t){return t*(Math.PI/180)}function fe(t,e,i){return isNaN(t)||t<=0?e:t>=1?i:e+t*(i-e)}function ge(t,e,i){if(t<=0)return e%360;if(t>=1)return i%360;const o=(e-i+360)%360;return o<=(i-e+360)%360?(e-o*t+360)%360:(e+o*t+360)%360}function be(t,e){const i=Math.pow(10,e);return Math.round(t*i)/i}Math.PI;class me{constructor(t,e,i,o){this.r=t,this.g=e,this.b=i,this.a="number"!=typeof o||isNaN(o)?1:o}static fromObject(t){return!t||isNaN(t.r)||isNaN(t.g)||isNaN(t.b)?null:new me(t.r,t.g,t.b,t.a)}equalValue(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}toStringHexRGB(){return"#"+[this.r,this.g,this.b].map(this.formatHexValue).join("")}toStringHexRGBA(){return this.toStringHexRGB()+this.formatHexValue(this.a)}toStringHexARGB(){return"#"+[this.a,this.r,this.g,this.b].map(this.formatHexValue).join("")}toStringWebRGB(){return`rgb(${Math.round(ue(this.r,0,255))},${Math.round(ue(this.g,0,255))},${Math.round(ue(this.b,0,255))})`}toStringWebRGBA(){return`rgba(${Math.round(ue(this.r,0,255))},${Math.round(ue(this.g,0,255))},${Math.round(ue(this.b,0,255))},${he(this.a,0,1)})`}roundToPrecision(t){return new me(be(this.r,t),be(this.g,t),be(this.b,t),be(this.a,t))}clamp(){return new me(he(this.r,0,1),he(this.g,0,1),he(this.b,0,1),he(this.a,0,1))}toObject(){return{r:this.r,g:this.g,b:this.b,a:this.a}}formatHexValue(t){return function(t){const e=Math.round(he(t,0,255)).toString(16);return 1===e.length?"0"+e:e}(ue(t,0,255))}}class ve{constructor(t,e,i){this.h=t,this.s=e,this.l=i}static fromObject(t){return!t||isNaN(t.h)||isNaN(t.s)||isNaN(t.l)?null:new ve(t.h,t.s,t.l)}equalValue(t){return this.h===t.h&&this.s===t.s&&this.l===t.l}roundToPrecision(t){return new ve(be(this.h,t),be(this.s,t),be(this.l,t))}toObject(){return{h:this.h,s:this.s,l:this.l}}}class ye{constructor(t,e,i){this.h=t,this.s=e,this.v=i}static fromObject(t){return!t||isNaN(t.h)||isNaN(t.s)||isNaN(t.v)?null:new ye(t.h,t.s,t.v)}equalValue(t){return this.h===t.h&&this.s===t.s&&this.v===t.v}roundToPrecision(t){return new ye(be(this.h,t),be(this.s,t),be(this.v,t))}toObject(){return{h:this.h,s:this.s,v:this.v}}}class xe{constructor(t,e,i){this.l=t,this.a=e,this.b=i}static fromObject(t){return!t||isNaN(t.l)||isNaN(t.a)||isNaN(t.b)?null:new xe(t.l,t.a,t.b)}equalValue(t){return this.l===t.l&&this.a===t.a&&this.b===t.b}roundToPrecision(t){return new xe(be(this.l,t),be(this.a,t),be(this.b,t))}toObject(){return{l:this.l,a:this.a,b:this.b}}}xe.epsilon=216/24389,xe.kappa=24389/27;class we{constructor(t,e,i){this.l=t,this.c=e,this.h=i}static fromObject(t){return!t||isNaN(t.l)||isNaN(t.c)||isNaN(t.h)?null:new we(t.l,t.c,t.h)}equalValue(t){return this.l===t.l&&this.c===t.c&&this.h===t.h}roundToPrecision(t){return new we(be(this.l,t),be(this.c,t),be(this.h,t))}toObject(){return{l:this.l,c:this.c,h:this.h}}}class $e{constructor(t,e,i){this.x=t,this.y=e,this.z=i}static fromObject(t){return!t||isNaN(t.x)||isNaN(t.y)||isNaN(t.z)?null:new $e(t.x,t.y,t.z)}equalValue(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}roundToPrecision(t){return new $e(be(this.x,t),be(this.y,t),be(this.z,t))}toObject(){return{x:this.x,y:this.y,z:this.z}}}function Ce(t){return.2126*t.r+.7152*t.g+.0722*t.b}function ke(t){function e(t){return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}return Ce(new me(e(t.r),e(t.g),e(t.b),1))}$e.whitePoint=new $e(.95047,1,1.08883);const Ie=(t,e)=>(t+.05)/(e+.05);function Te(t,e){const i=ke(t),o=ke(e);return i>o?Ie(i,o):Ie(o,i)}function Se(t){const e=Math.max(t.r,t.g,t.b),i=Math.min(t.r,t.g,t.b),o=e-i;let s=0;0!==o&&(s=e===t.r?(t.g-t.b)/o%6*60:e===t.g?60*((t.b-t.r)/o+2):60*((t.r-t.g)/o+4)),s<0&&(s+=360);const n=(e+i)/2;let r=0;return 0!==o&&(r=o/(1-Math.abs(2*n-1))),new ve(s,r,n)}function Ve(t,e=1){const i=(1-Math.abs(2*t.l-1))*t.s,o=i*(1-Math.abs(t.h/60%2-1)),s=t.l-i/2;let n=0,r=0,a=0;return t.h<60?(n=i,r=o,a=0):t.h<120?(n=o,r=i,a=0):t.h<180?(n=0,r=i,a=o):t.h<240?(n=0,r=o,a=i):t.h<300?(n=o,r=0,a=i):t.h<360&&(n=i,r=0,a=o),new me(n+s,r+s,a+s,e)}function Oe(t){const e=Math.max(t.r,t.g,t.b),i=e-Math.min(t.r,t.g,t.b);let o=0;0!==i&&(o=e===t.r?(t.g-t.b)/i%6*60:e===t.g?60*((t.b-t.r)/i+2):60*((t.r-t.g)/i+4)),o<0&&(o+=360);let s=0;return 0!==e&&(s=i/e),new ye(o,s,e)}function Fe(t){function e(t){return t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}const i=e(t.r),o=e(t.g),s=e(t.b);return new $e(.4124564*i+.3575761*o+.1804375*s,.2126729*i+.7151522*o+.072175*s,.0193339*i+.119192*o+.9503041*s)}function De(t,e=1){function i(t){return t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055}const o=i(3.2404542*t.x-1.5371385*t.y-.4985314*t.z),s=i(-.969266*t.x+1.8760108*t.y+.041556*t.z),n=i(.0556434*t.x-.2040259*t.y+1.0572252*t.z);return new me(o,s,n,e)}function Ae(t){return function(t){function e(t){return t>xe.epsilon?Math.pow(t,1/3):(xe.kappa*t+16)/116}const i=e(t.x/$e.whitePoint.x),o=e(t.y/$e.whitePoint.y),s=e(t.z/$e.whitePoint.z);return new xe(116*o-16,500*(i-o),200*(o-s))}(Fe(t))}function Ne(t,e=1){return De(function(t){const e=(t.l+16)/116,i=e+t.a/500,o=e-t.b/200,s=Math.pow(i,3),n=Math.pow(e,3),r=Math.pow(o,3);let a=0;a=s>xe.epsilon?s:(116*i-16)/xe.kappa;let l=0;l=t.l>xe.epsilon*xe.kappa?n:t.l/xe.kappa;let c=0;return c=r>xe.epsilon?r:(116*o-16)/xe.kappa,a=$e.whitePoint.x*a,l=$e.whitePoint.y*l,c=$e.whitePoint.z*c,new $e(a,l,c)}(t),e)}function Pe(t){return function(t){let e=0;(Math.abs(t.b)>.001||Math.abs(t.a)>.001)&&(e=Math.atan2(t.b,t.a)*(180/Math.PI)),e<0&&(e+=360);const i=Math.sqrt(t.a*t.a+t.b*t.b);return new we(t.l,i,e)}(Ae(t))}function Le(t,e=1){return Ne(function(t){let e=0,i=0;return 0!==t.h&&(e=Math.cos(pe(t.h))*t.c,i=Math.sin(pe(t.h))*t.c),new xe(t.l,e,i)}(t),e)}function Me(t,e,i=18){const o=Pe(t);let s=o.c+e*i;return s<0&&(s=0),Le(new we(o.l,s,o.h))}function Be(t,e){return t*e}function Ee(t,e){return new me(Be(t.r,e.r),Be(t.g,e.g),Be(t.b,e.b),1)}function He(t,e){return he(t<.5?2*e*t:1-2*(1-e)*(1-t),0,1)}function Re(t,e){return new me(He(t.r,e.r),He(t.g,e.g),He(t.b,e.b),1)}var je,ze;function _e(t,e,i,o){if(isNaN(t)||t<=0)return i;if(t>=1)return o;switch(e){case ze.HSL:return Ve(function(t,e,i){return isNaN(t)||t<=0?e:t>=1?i:new ve(ge(t,e.h,i.h),fe(t,e.s,i.s),fe(t,e.l,i.l))}(t,Se(i),Se(o)));case ze.HSV:return function(t,e=1){const i=t.s*t.v,o=i*(1-Math.abs(t.h/60%2-1)),s=t.v-i;let n=0,r=0,a=0;return t.h<60?(n=i,r=o,a=0):t.h<120?(n=o,r=i,a=0):t.h<180?(n=0,r=i,a=o):t.h<240?(n=0,r=o,a=i):t.h<300?(n=o,r=0,a=i):t.h<360&&(n=i,r=0,a=o),new me(n+s,r+s,a+s,e)}(function(t,e,i){return isNaN(t)||t<=0?e:t>=1?i:new ye(ge(t,e.h,i.h),fe(t,e.s,i.s),fe(t,e.v,i.v))}(t,Oe(i),Oe(o)));case ze.XYZ:return De(function(t,e,i){return isNaN(t)||t<=0?e:t>=1?i:new $e(fe(t,e.x,i.x),fe(t,e.y,i.y),fe(t,e.z,i.z))}(t,Fe(i),Fe(o)));case ze.LAB:return Ne(function(t,e,i){return isNaN(t)||t<=0?e:t>=1?i:new xe(fe(t,e.l,i.l),fe(t,e.a,i.a),fe(t,e.b,i.b))}(t,Ae(i),Ae(o)));case ze.LCH:return Le(function(t,e,i){return isNaN(t)||t<=0?e:t>=1?i:new we(fe(t,e.l,i.l),fe(t,e.c,i.c),ge(t,e.h,i.h))}(t,Pe(i),Pe(o)));default:return function(t,e,i){return isNaN(t)||t<=0?e:t>=1?i:new me(fe(t,e.r,i.r),fe(t,e.g,i.g),fe(t,e.b,i.b),fe(t,e.a,i.a))}(t,i,o)}}!function(t){t[t.Burn=0]="Burn",t[t.Color=1]="Color",t[t.Darken=2]="Darken",t[t.Dodge=3]="Dodge",t[t.Lighten=4]="Lighten",t[t.Multiply=5]="Multiply",t[t.Overlay=6]="Overlay",t[t.Screen=7]="Screen"}(je||(je={})),function(t){t[t.RGB=0]="RGB",t[t.HSL=1]="HSL",t[t.HSV=2]="HSV",t[t.XYZ=3]="XYZ",t[t.LAB=4]="LAB",t[t.LCH=5]="LCH"}(ze||(ze={}));class qe{constructor(t){if(null==t||0===t.length)throw new Error("The stops argument must be non-empty");this.stops=this.sortColorScaleStops(t)}static createBalancedColorScale(t){if(null==t||0===t.length)throw new Error("The colors argument must be non-empty");const e=new Array(t.length);for(let i=0;i<t.length;i++)0===i?e[i]={color:t[i],position:0}:i===t.length-1?e[i]={color:t[i],position:1}:e[i]={color:t[i],position:i*(1/(t.length-1))};return new qe(e)}getColor(t,e=ze.RGB){if(1===this.stops.length)return this.stops[0].color;if(t<=0)return this.stops[0].color;if(t>=1)return this.stops[this.stops.length-1].color;let i=0;for(let e=0;e<this.stops.length;e++)this.stops[e].position<=t&&(i=e);let o=i+1;return o>=this.stops.length&&(o=this.stops.length-1),_e((t-this.stops[i].position)*(1/(this.stops[o].position-this.stops[i].position)),e,this.stops[i].color,this.stops[o].color)}trim(t,e,i=ze.RGB){if(t<0||e>1||e<t)throw new Error("Invalid bounds");if(t===e)return new qe([{color:this.getColor(t,i),position:0}]);const o=[];for(let i=0;i<this.stops.length;i++)this.stops[i].position>=t&&this.stops[i].position<=e&&o.push(this.stops[i]);if(0===o.length)return new qe([{color:this.getColor(t),position:t},{color:this.getColor(e),position:e}]);o[0].position!==t&&o.unshift({color:this.getColor(t),position:t}),o[o.length-1].position!==e&&o.push({color:this.getColor(e),position:e});const s=e-t,n=new Array(o.length);for(let e=0;e<o.length;e++)n[e]={color:o[e].color,position:(o[e].position-t)/s};return new qe(n)}findNextColor(t,e,i=!1,o=ze.RGB,s=.005,n=32){isNaN(t)||t<=0?t=0:t>=1&&(t=1);const r=this.getColor(t,o),a=i?0:1;if(Te(r,this.getColor(a,o))<=e)return a;let l=i?0:t,c=i?t:0,h=a,d=0;for(;d<=n;){h=Math.abs(c-l)/2+l;const t=Te(r,this.getColor(h,o));if(Math.abs(t-e)<=s)return h;t>e?i?l=h:c=h:i?c=h:l=h,d++}return h}clone(){const t=new Array(this.stops.length);for(let e=0;e<t.length;e++)t[e]={color:this.stops[e].color,position:this.stops[e].position};return new qe(t)}sortColorScaleStops(t){return t.sort(((t,e)=>{const i=t.position,o=e.position;return i<o?-1:i>o?1:0}))}}const Ge=/^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i;function Ue(t){const e=Ge.exec(t);if(null===e)return null;let i=e[1];if(3===i.length){const t=i.charAt(0),e=i.charAt(1),o=i.charAt(2);i=t.concat(t,e,e,o,o)}const o=parseInt(i,16);return isNaN(o)?null:new me(de((16711680&o)>>>16,0,255),de((65280&o)>>>8,0,255),de(255&o,0,255),1)}class We{constructor(t){this.config=Object.assign({},We.defaultPaletteConfig,t),this.palette=[],this.updatePaletteColors()}updatePaletteGenerationValues(t){let e=!1;for(const i in t)this.config[i]&&(this.config[i].equalValue?this.config[i].equalValue(t[i])||(this.config[i]=t[i],e=!0):t[i]!==this.config[i]&&(this.config[i]=t[i],e=!0));return e&&this.updatePaletteColors(),e}updatePaletteColors(){const t=this.generatePaletteColorScale();for(let e=0;e<this.config.steps;e++)this.palette[e]=t.getColor(e/(this.config.steps-1),this.config.interpolationMode)}generatePaletteColorScale(){const t=Se(this.config.baseColor),e=new qe([{position:0,color:this.config.scaleColorLight},{position:.5,color:this.config.baseColor},{position:1,color:this.config.scaleColorDark}]).trim(this.config.clipLight,1-this.config.clipDark);let i=e.getColor(0),o=e.getColor(1);if(t.s>=this.config.saturationAdjustmentCutoff&&(i=Me(i,this.config.saturationLight),o=Me(o,this.config.saturationDark)),0!==this.config.multiplyLight){const t=Ee(this.config.baseColor,i);i=_e(this.config.multiplyLight,this.config.interpolationMode,i,t)}if(0!==this.config.multiplyDark){const t=Ee(this.config.baseColor,o);o=_e(this.config.multiplyDark,this.config.interpolationMode,o,t)}if(0!==this.config.overlayLight){const t=Re(this.config.baseColor,i);i=_e(this.config.overlayLight,this.config.interpolationMode,i,t)}if(0!==this.config.overlayDark){const t=Re(this.config.baseColor,o);o=_e(this.config.overlayDark,this.config.interpolationMode,o,t)}return this.config.baseScalePosition?this.config.baseScalePosition<=0?new qe([{position:0,color:this.config.baseColor},{position:1,color:o.clamp()}]):this.config.baseScalePosition>=1?new qe([{position:0,color:i.clamp()},{position:1,color:this.config.baseColor}]):new qe([{position:0,color:i.clamp()},{position:this.config.baseScalePosition,color:this.config.baseColor},{position:1,color:o.clamp()}]):new qe([{position:0,color:i.clamp()},{position:.5,color:this.config.baseColor},{position:1,color:o.clamp()}])}}We.defaultPaletteConfig={baseColor:Ue("#808080"),steps:11,interpolationMode:ze.RGB,scaleColorLight:new me(1,1,1,1),scaleColorDark:new me(0,0,0,1),clipLight:.185,clipDark:.16,saturationAdjustmentCutoff:.05,saturationLight:.35,saturationDark:1.25,overlayLight:0,overlayDark:.25,multiplyLight:0,multiplyDark:0,baseScalePosition:.5},We.greyscalePaletteConfig={baseColor:Ue("#808080"),steps:11,interpolationMode:ze.RGB,scaleColorLight:new me(1,1,1,1),scaleColorDark:new me(0,0,0,1),clipLight:0,clipDark:0,saturationAdjustmentCutoff:0,saturationLight:0,saturationDark:0,overlayLight:0,overlayDark:0,multiplyLight:0,multiplyDark:0,baseScalePosition:.5},We.defaultPaletteConfig.scaleColorLight,We.defaultPaletteConfig.scaleColorDark;class Ke{constructor(t){this.palette=[],this.config=Object.assign({},Ke.defaultPaletteConfig,t),this.regenPalettes()}regenPalettes(){let t=this.config.steps;(isNaN(t)||t<3)&&(t=3);const e=.14,i=new me(e,e,e,1),o=new We(Object.assign(Object.assign({},We.greyscalePaletteConfig),{baseColor:i,baseScalePosition:86/94,steps:t})).palette,s=(Ce(this.config.baseColor)+Se(this.config.baseColor).l)/2,n=this.matchRelativeLuminanceIndex(s,o)/(t-1),r=this.matchRelativeLuminanceIndex(e,o)/(t-1),a=Se(this.config.baseColor),l=Ve(ve.fromObject({h:a.h,s:a.s,l:e})),c=Ve(ve.fromObject({h:a.h,s:a.s,l:.06})),h=new Array(5);h[0]={position:0,color:new me(1,1,1,1)},h[1]={position:n,color:this.config.baseColor},h[2]={position:r,color:l},h[3]={position:.99,color:c},h[4]={position:1,color:new me(0,0,0,1)};const d=new qe(h);this.palette=new Array(t);for(let e=0;e<t;e++){const i=d.getColor(e/(t-1),ze.RGB);this.palette[e]=i}}matchRelativeLuminanceIndex(t,e){let i=Number.MAX_VALUE,o=0,s=0;const n=e.length;for(;s<n;s++){const n=Math.abs(Ce(e[s])-t);n<i&&(i=n,o=s)}return o}}function Ye(t,e){const i=t.relativeLuminance>e.relativeLuminance?t:e,o=t.relativeLuminance>e.relativeLuminance?e:t;return(i.relativeLuminance+.05)/(o.relativeLuminance+.05)}Ke.defaultPaletteConfig={baseColor:Ue("#808080"),steps:94};const Qe=Object.freeze({create:(t,e,i)=>new Xe(t,e,i),from:t=>new Xe(t.r,t.g,t.b)});class Xe extends me{constructor(t,e,i){super(t,e,i,1),this.toColorString=this.toStringHexRGB,this.contrast=Ye.bind(null,this),this.createCSS=this.toColorString,this.relativeLuminance=ke(this)}static fromObject(t){return new Xe(t.r,t.g,t.b)}}function Ze(t,e,i=0,o=t.length-1){if(o===i)return t[i];const s=Math.floor((o-i)/2)+i;return e(t[s])?Ze(t,e,i,s):Ze(t,e,s+1,o)}const Je=(-.1+Math.sqrt(.21))/2;function ti(t){return function(t){return t.relativeLuminance<=Je}(t)?-1:1}const ei=Object.freeze({create:function(t,e,i){return"number"==typeof t?ei.from(Qe.create(t,e,i)):ei.from(t)},from:function(t){return function(t){const e={r:0,g:0,b:0,toColorString:()=>"",contrast:()=>0,relativeLuminance:0};for(const i in e)if(typeof e[i]!=typeof t[i])return!1;return!0}(t)?ii.from(t):ii.from(Qe.create(t.r,t.g,t.b))}});class ii{constructor(t,e){this.source=t,this.swatches=e,this.reversedSwatches=Object.freeze([...this.swatches].reverse()),this.lastIndex=this.swatches.length-1}colorContrast(t,e,i,o){void 0===i&&(i=this.closestIndexOf(t));let s=this.swatches;const n=this.lastIndex;let r=i;return void 0===o&&(o=ti(t)),-1===o&&(s=this.reversedSwatches,r=n-r),Ze(s,(i=>Ye(t,i)>=e),r,n)}get(t){return this.swatches[t]||this.swatches[he(t,0,this.lastIndex)]}closestIndexOf(t){const e=this.swatches.indexOf(t);if(-1!==e)return e;const i=this.swatches.reduce(((e,i)=>Math.abs(i.relativeLuminance-t.relativeLuminance)<Math.abs(e.relativeLuminance-t.relativeLuminance)?i:e));return this.swatches.indexOf(i)}static from(t){return new ii(t,Object.freeze(new Ke({baseColor:me.fromObject(t)}).palette.map((t=>{const e=Ue(t.toStringHexRGB());return Qe.create(e.r,e.g,e.b)}))))}}var oi;!function(t){t.ltr="ltr",t.rtl="rtl"}(oi||(oi={}));const si=Qe.create(1,1,1),ni=Qe.create(0,0,0),ri=Qe.create(.5,.5,.5),ai=Ue("#DA1A5F"),li=Qe.create(ai.r,ai.g,ai.b);function ci(t){return Qe.create(t,t,t)}var hi;function di(t,e,i,o,s,n){return Math.max(t.closestIndexOf(ci(e))+i,o,s,n)}!function(t){t[t.LightMode=1]="LightMode",t[t.DarkMode=.23]="DarkMode"}(hi||(hi={}));const{create:ui}=vt,pi=ui("body-font").withDefault('aktiv-grotesk, "Segoe UI", Arial, Helvetica, sans-serif'),fi=ui("base-height-multiplier").withDefault(10),gi=(ui("base-horizontal-spacing-multiplier").withDefault(3),ui("base-layer-luminance").withDefault(hi.DarkMode)),bi=ui("control-corner-radius").withDefault(4),mi=ui("density").withDefault(0),vi=ui("design-unit").withDefault(4),yi=(ui("direction").withDefault(oi.ltr),ui("disabled-opacity").withDefault(.3)),xi=ui("stroke-width").withDefault(1),wi=ui("focus-stroke-width").withDefault(2),$i=ui("type-ramp-base-font-size").withDefault("14px"),Ci=ui("type-ramp-base-line-height").withDefault("20px"),ki=ui("type-ramp-minus-1-font-size").withDefault("12px"),Ii=ui("type-ramp-minus-1-line-height").withDefault("16px"),Ti=(ui("type-ramp-minus-2-font-size").withDefault("10px"),ui("type-ramp-minus-2-line-height").withDefault("16px"),ui("type-ramp-plus-1-font-size").withDefault("16px"),ui("type-ramp-plus-1-line-height").withDefault("24px"),ui("type-ramp-plus-2-font-size").withDefault("20px"),ui("type-ramp-plus-2-line-height").withDefault("28px"),ui("type-ramp-plus-3-font-size").withDefault("28px"),ui("type-ramp-plus-3-line-height").withDefault("36px"),ui("type-ramp-plus-4-font-size").withDefault("34px"),ui("type-ramp-plus-4-line-height").withDefault("44px"),ui("type-ramp-plus-5-font-size").withDefault("46px"),ui("type-ramp-plus-5-line-height").withDefault("56px"),ui("type-ramp-plus-6-font-size").withDefault("60px"),ui("type-ramp-plus-6-line-height").withDefault("72px"),ui("accent-fill-rest-delta").withDefault(0),ui("accent-fill-hover-delta").withDefault(4)),Si=ui("accent-fill-active-delta").withDefault(-5),Vi=ui("accent-fill-focus-delta").withDefault(0),Oi=ui("accent-foreground-rest-delta").withDefault(0),Fi=ui("accent-foreground-hover-delta").withDefault(6),Di=ui("accent-foreground-active-delta").withDefault(-4),Ai=ui("accent-foreground-focus-delta").withDefault(0),Ni=ui("neutral-fill-rest-delta").withDefault(7),Pi=ui("neutral-fill-hover-delta").withDefault(10),Li=ui("neutral-fill-active-delta").withDefault(5),Mi=ui("neutral-fill-focus-delta").withDefault(0),Bi=ui("neutral-fill-input-rest-delta").withDefault(0),Ei=ui("neutral-fill-input-hover-delta").withDefault(0),Hi=ui("neutral-fill-input-active-delta").withDefault(0),Ri=ui("neutral-fill-input-focus-delta").withDefault(0),ji=ui("neutral-fill-stealth-rest-delta").withDefault(0),zi=ui("neutral-fill-stealth-hover-delta").withDefault(5),_i=ui("neutral-fill-stealth-active-delta").withDefault(3),qi=ui("neutral-fill-stealth-focus-delta").withDefault(0),Gi=ui("neutral-fill-strong-rest-delta").withDefault(0),Ui=ui("neutral-fill-strong-hover-delta").withDefault(8),Wi=ui("neutral-fill-strong-active-delta").withDefault(-5),Ki=ui("neutral-fill-strong-focus-delta").withDefault(0),Yi=ui("neutral-fill-layer-rest-delta").withDefault(3),Qi=ui("neutral-stroke-rest-delta").withDefault(25),Xi=ui("neutral-stroke-hover-delta").withDefault(40),Zi=ui("neutral-stroke-active-delta").withDefault(16),Ji=ui("neutral-stroke-focus-delta").withDefault(25),to=ui("neutral-stroke-divider-rest-delta").withDefault(8),eo=ui({name:"neutral-palette",cssCustomPropertyName:null}).withDefault(ei.create(ri)),io=ui({name:"accent-palette",cssCustomPropertyName:null}).withDefault(ei.create(li)),oo=ui({name:"neutral-layer-card-container-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=eo.getValueFor(t),i=gi.getValueFor(t),o=Yi.getValueFor(t),e.get(e.closestIndexOf(ci(i))+o);var e,i,o}}),so=(ui("neutral-layer-card-container").withDefault((t=>oo.getValueFor(t).evaluate(t))),ui({name:"neutral-layer-floating-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>function(t,e,i){const o=t.closestIndexOf(ci(e))-i;return t.get(o-i)}(eo.getValueFor(t),gi.getValueFor(t),Yi.getValueFor(t))})),no=ui("neutral-layer-floating").withDefault((t=>so.getValueFor(t).evaluate(t))),ro=ui({name:"neutral-layer-1-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>function(t,e){return t.get(t.closestIndexOf(ci(e)))}(eo.getValueFor(t),gi.getValueFor(t))}),ao=ui("neutral-layer-1").withDefault((t=>ro.getValueFor(t).evaluate(t))),lo=ui({name:"neutral-layer-2-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=eo.getValueFor(t),i=gi.getValueFor(t),o=Yi.getValueFor(t),s=Ni.getValueFor(t),n=Pi.getValueFor(t),r=Li.getValueFor(t),e.get(di(e,i,o,s,n,r));var e,i,o,s,n,r}}),co=(ui("neutral-layer-2").withDefault((t=>lo.getValueFor(t).evaluate(t))),ui({name:"neutral-layer-3-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=eo.getValueFor(t),i=gi.getValueFor(t),o=Yi.getValueFor(t),s=Ni.getValueFor(t),n=Pi.getValueFor(t),r=Li.getValueFor(t),e.get(di(e,i,o,s,n,r)+o);var e,i,o,s,n,r}})),ho=(ui("neutral-layer-3").withDefault((t=>co.getValueFor(t).evaluate(t))),ui({name:"neutral-layer-4-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=eo.getValueFor(t),i=gi.getValueFor(t),o=Yi.getValueFor(t),s=Ni.getValueFor(t),n=Pi.getValueFor(t),r=Li.getValueFor(t),e.get(di(e,i,o,s,n,r)+2*o);var e,i,o,s,n,r}})),uo=(ui("neutral-layer-4").withDefault((t=>ho.getValueFor(t).evaluate(t))),ui("fill-color").withDefault((t=>ao.getValueFor(t))));var po;!function(t){t[t.normal=4.5]="normal",t[t.large=7]="large"}(po||(po={}));const fo=ui({name:"accent-fill-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>function(t,e,i,o,s,n,r,a,l){const c=t.source,h=e.closestIndexOf(i)>=Math.max(r,a,l)?-1:1,d=t.closestIndexOf(c),u=d+-1*h*o,p=u+h*s,f=u+h*n;return{rest:t.get(u),hover:t.get(d),active:t.get(p),focus:t.get(f)}}(io.getValueFor(t),eo.getValueFor(t),e||uo.getValueFor(t),Ti.getValueFor(t),Si.getValueFor(t),Vi.getValueFor(t),Ni.getValueFor(t),Pi.getValueFor(t),Li.getValueFor(t))}),go=ui("accent-fill-rest").withDefault((t=>fo.getValueFor(t).evaluate(t).rest)),bo=ui("accent-fill-hover").withDefault((t=>fo.getValueFor(t).evaluate(t).hover)),mo=ui("accent-fill-active").withDefault((t=>fo.getValueFor(t).evaluate(t).active)),vo=ui("accent-fill-focus").withDefault((t=>fo.getValueFor(t).evaluate(t).focus)),yo=t=>(e,i)=>function(t,e){return t.contrast(si)>=e?si:ni}(i||go.getValueFor(e),t),xo=ui({name:"foreground-on-accent-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>yo(po.normal)(t,e)}),wo=ui("foreground-on-accent-rest").withDefault((t=>xo.getValueFor(t).evaluate(t,go.getValueFor(t)))),$o=ui("foreground-on-accent-hover").withDefault((t=>xo.getValueFor(t).evaluate(t,bo.getValueFor(t)))),Co=ui("foreground-on-accent-active").withDefault((t=>xo.getValueFor(t).evaluate(t,mo.getValueFor(t)))),ko=ui("foreground-on-accent-focus").withDefault((t=>xo.getValueFor(t).evaluate(t,vo.getValueFor(t)))),Io=ui({name:"foreground-on-accent-large-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>yo(po.large)(t,e)}),To=(ui("foreground-on-accent-rest-large").withDefault((t=>Io.getValueFor(t).evaluate(t,go.getValueFor(t)))),ui("foreground-on-accent-hover-large").withDefault((t=>Io.getValueFor(t).evaluate(t,bo.getValueFor(t)))),ui("foreground-on-accent-active-large").withDefault((t=>Io.getValueFor(t).evaluate(t,mo.getValueFor(t)))),ui("foreground-on-accent-focus-large").withDefault((t=>Io.getValueFor(t).evaluate(t,vo.getValueFor(t)))),t=>(e,i)=>function(t,e,i,o,s,n,r){const a=t.source,l=t.closestIndexOf(a),c=ti(e),h=l+(1===c?Math.min(o,s):Math.max(c*o,c*s)),d=t.colorContrast(e,i,h,c),u=t.closestIndexOf(d),p=u+c*Math.abs(o-s);let f,g;return(1===c?o<s:c*o>c*s)?(f=u,g=p):(f=p,g=u),{rest:t.get(f),hover:t.get(g),active:t.get(f+c*n),focus:t.get(f+c*r)}}(io.getValueFor(e),i||uo.getValueFor(e),t,Oi.getValueFor(e),Fi.getValueFor(e),Di.getValueFor(e),Ai.getValueFor(e))),So=ui({name:"accent-foreground-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>To(po.normal)(t,e)}),Vo=ui("accent-foreground-rest").withDefault((t=>So.getValueFor(t).evaluate(t).rest)),Oo=ui("accent-foreground-hover").withDefault((t=>So.getValueFor(t).evaluate(t).hover)),Fo=ui("accent-foreground-active").withDefault((t=>So.getValueFor(t).evaluate(t).active)),Do=(ui("accent-foreground-focus").withDefault((t=>So.getValueFor(t).evaluate(t).focus)),ui({name:"neutral-fill-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>function(t,e,i,o,s,n){const r=t.closestIndexOf(e),a=r>=Math.max(i,o,s,n)?-1:1;return{rest:t.get(r+a*i),hover:t.get(r+a*o),active:t.get(r+a*s),focus:t.get(r+a*n)}}(eo.getValueFor(t),e||uo.getValueFor(t),Ni.getValueFor(t),Pi.getValueFor(t),Li.getValueFor(t),Mi.getValueFor(t))})),Ao=ui("neutral-fill-rest").withDefault((t=>Do.getValueFor(t).evaluate(t).rest)),No=ui("neutral-fill-hover").withDefault((t=>Do.getValueFor(t).evaluate(t).hover)),Po=ui("neutral-fill-active").withDefault((t=>Do.getValueFor(t).evaluate(t).active)),Lo=(ui("neutral-fill-focus").withDefault((t=>Do.getValueFor(t).evaluate(t).focus)),ui({name:"neutral-fill-input-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>function(t,e,i,o,s,n){const r=ti(e),a=t.closestIndexOf(e);return{rest:t.get(a-r*i),hover:t.get(a-r*o),active:t.get(a-r*s),focus:t.get(a-r*n)}}(eo.getValueFor(t),e||uo.getValueFor(t),Bi.getValueFor(t),Ei.getValueFor(t),Hi.getValueFor(t),Ri.getValueFor(t))})),Mo=ui("neutral-fill-input-rest").withDefault((t=>Lo.getValueFor(t).evaluate(t).rest)),Bo=ui("neutral-fill-input-hover").withDefault((t=>Lo.getValueFor(t).evaluate(t).hover)),Eo=ui("neutral-fill-input-active").withDefault((t=>Lo.getValueFor(t).evaluate(t).active)),Ho=(ui("neutral-fill-input-focus").withDefault((t=>Lo.getValueFor(t).evaluate(t).focus)),ui({name:"neutral-fill-stealth-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>function(t,e,i,o,s,n,r,a,l,c){const h=Math.max(i,o,s,n,r,a,l,c),d=t.closestIndexOf(e),u=d>=h?-1:1;return{rest:t.get(d+u*i),hover:t.get(d+u*o),active:t.get(d+u*s),focus:t.get(d+u*n)}}(eo.getValueFor(t),e||uo.getValueFor(t),ji.getValueFor(t),zi.getValueFor(t),_i.getValueFor(t),qi.getValueFor(t),Ni.getValueFor(t),Pi.getValueFor(t),Li.getValueFor(t),Mi.getValueFor(t))})),Ro=ui("neutral-fill-stealth-rest").withDefault((t=>Ho.getValueFor(t).evaluate(t).rest)),jo=ui("neutral-fill-stealth-hover").withDefault((t=>Ho.getValueFor(t).evaluate(t).hover)),zo=ui("neutral-fill-stealth-active").withDefault((t=>Ho.getValueFor(t).evaluate(t).active)),_o=(ui("neutral-fill-stealth-focus").withDefault((t=>Ho.getValueFor(t).evaluate(t).focus)),ui({name:"neutral-fill-strong-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>function(t,e,i,o,s,n){const r=ti(e),a=t.closestIndexOf(t.colorContrast(e,4.5)),l=a+r*Math.abs(i-o);let c,h;return(1===r?i<o:r*i>r*o)?(c=a,h=l):(c=l,h=a),{rest:t.get(c),hover:t.get(h),active:t.get(c+r*s),focus:t.get(c+r*n)}}(eo.getValueFor(t),e||uo.getValueFor(t),Gi.getValueFor(t),Ui.getValueFor(t),Wi.getValueFor(t),Ki.getValueFor(t))})),qo=(ui("neutral-fill-strong-rest").withDefault((t=>_o.getValueFor(t).evaluate(t).rest)),ui("neutral-fill-strong-hover").withDefault((t=>_o.getValueFor(t).evaluate(t).hover)),ui("neutral-fill-strong-active").withDefault((t=>_o.getValueFor(t).evaluate(t).active)),ui("neutral-fill-strong-focus").withDefault((t=>_o.getValueFor(t).evaluate(t).focus)),ui({name:"neutral-fill-layer-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>function(t,e,i){const o=t.closestIndexOf(e);return t.get(o-(o<i?-1*i:i))}(eo.getValueFor(t),e||uo.getValueFor(t),Yi.getValueFor(t))})),Go=(ui("neutral-fill-layer-rest").withDefault((t=>qo.getValueFor(t).evaluate(t))),ui({name:"focus-stroke-outer-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=eo.getValueFor(t),i=uo.getValueFor(t),e.colorContrast(i,3.5);var e,i}})),Uo=ui("focus-stroke-outer").withDefault((t=>Go.getValueFor(t).evaluate(t))),Wo=ui({name:"focus-stroke-inner-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=io.getValueFor(t),i=uo.getValueFor(t),o=Uo.getValueFor(t),e.colorContrast(o,3.5,e.closestIndexOf(e.source),-1*ti(i));var e,i,o}}),Ko=ui("focus-stroke-inner").withDefault((t=>Wo.getValueFor(t).evaluate(t))),Yo=ui({name:"neutral-foreground-hint-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=eo.getValueFor(t),i=uo.getValueFor(t),e.colorContrast(i,4.5);var e,i}}),Qo=ui("neutral-foreground-hint").withDefault((t=>Yo.getValueFor(t).evaluate(t))),Xo=ui({name:"neutral-foreground-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>{return e=eo.getValueFor(t),i=uo.getValueFor(t),e.colorContrast(i,14);var e,i}}),Zo=ui("neutral-foreground-rest").withDefault((t=>Xo.getValueFor(t).evaluate(t))),Jo=ui({name:"neutral-stroke-recipe",cssCustomPropertyName:null}).withDefault({evaluate:t=>function(t,e,i,o,s,n){const r=t.closestIndexOf(e),a=ti(e),l=r+a*i,c=l+a*(o-i),h=l+a*(s-i),d=l+a*(n-i);return{rest:t.get(l),hover:t.get(c),active:t.get(h),focus:t.get(d)}}(eo.getValueFor(t),uo.getValueFor(t),Qi.getValueFor(t),Xi.getValueFor(t),Zi.getValueFor(t),Ji.getValueFor(t))}),ts=ui("neutral-stroke-rest").withDefault((t=>Jo.getValueFor(t).evaluate(t).rest)),es=ui("neutral-stroke-hover").withDefault((t=>Jo.getValueFor(t).evaluate(t).hover)),is=ui("neutral-stroke-active").withDefault((t=>Jo.getValueFor(t).evaluate(t).active)),os=(ui("neutral-stroke-focus").withDefault((t=>Jo.getValueFor(t).evaluate(t).focus)),ui({name:"neutral-stroke-divider-recipe",cssCustomPropertyName:null}).withDefault({evaluate:(t,e)=>function(t,e,i){return t.get(t.closestIndexOf(e)+ti(e)*i)}(eo.getValueFor(t),e||uo.getValueFor(t),to.getValueFor(t))})),ss=ui("neutral-stroke-divider-rest").withDefault((t=>os.getValueFor(t).evaluate(t)));class ns{}o([K({attribute:"aria-atomic",mode:"fromView"})],ns.prototype,"ariaAtomic",void 0),o([K({attribute:"aria-busy",mode:"fromView"})],ns.prototype,"ariaBusy",void 0),o([K({attribute:"aria-controls",mode:"fromView"})],ns.prototype,"ariaControls",void 0),o([K({attribute:"aria-current",mode:"fromView"})],ns.prototype,"ariaCurrent",void 0),o([K({attribute:"aria-describedby",mode:"fromView"})],ns.prototype,"ariaDescribedby",void 0),o([K({attribute:"aria-details",mode:"fromView"})],ns.prototype,"ariaDetails",void 0),o([K({attribute:"aria-disabled",mode:"fromView"})],ns.prototype,"ariaDisabled",void 0),o([K({attribute:"aria-errormessage",mode:"fromView"})],ns.prototype,"ariaErrormessage",void 0),o([K({attribute:"aria-flowto",mode:"fromView"})],ns.prototype,"ariaFlowto",void 0),o([K({attribute:"aria-haspopup",mode:"fromView"})],ns.prototype,"ariaHaspopup",void 0),o([K({attribute:"aria-hidden",mode:"fromView"})],ns.prototype,"ariaHidden",void 0),o([K({attribute:"aria-invalid",mode:"fromView"})],ns.prototype,"ariaInvalid",void 0),o([K({attribute:"aria-keyshortcuts",mode:"fromView"})],ns.prototype,"ariaKeyshortcuts",void 0),o([K({attribute:"aria-label",mode:"fromView"})],ns.prototype,"ariaLabel",void 0),o([K({attribute:"aria-labelledby",mode:"fromView"})],ns.prototype,"ariaLabelledby",void 0),o([K({attribute:"aria-live",mode:"fromView"})],ns.prototype,"ariaLive",void 0),o([K({attribute:"aria-owns",mode:"fromView"})],ns.prototype,"ariaOwns",void 0),o([K({attribute:"aria-relevant",mode:"fromView"})],ns.prototype,"ariaRelevant",void 0),o([K({attribute:"aria-roledescription",mode:"fromView"})],ns.prototype,"ariaRoledescription",void 0);class rs{constructor(){this.targetIndex=0}}class as extends rs{constructor(){super(...arguments),this.createPlaceholder=m.createInterpolationPlaceholder}}class ls extends rs{constructor(t,e,i){super(),this.name=t,this.behavior=e,this.options=i}createPlaceholder(t){return m.createCustomAttributePlaceholder(this.name,t)}createBehavior(t){return new this.behavior(t,this.options)}}function cs(t,e){this.source=t,this.context=e,null===this.bindingObserver&&(this.bindingObserver=F.binding(this.binding,this,this.isBindingVolatile)),this.updateTarget(this.bindingObserver.observe(t,e))}function hs(t,e){this.source=t,this.context=e,this.target.addEventListener(this.targetName,this)}function ds(){this.bindingObserver.disconnect(),this.source=null,this.context=null}function us(){this.bindingObserver.disconnect(),this.source=null,this.context=null;const t=this.target.$fastView;void 0!==t&&t.isComposed&&(t.unbind(),t.needsBindOnly=!0)}function ps(){this.target.removeEventListener(this.targetName,this),this.source=null,this.context=null}function fs(t){m.setAttribute(this.target,this.targetName,t)}function gs(t){m.setBooleanAttribute(this.target,this.targetName,t)}function bs(t){if(null==t&&(t=""),t.create){this.target.textContent="";let e=this.target.$fastView;void 0===e?e=t.create():this.target.$fastTemplate!==t&&(e.isComposed&&(e.remove(),e.unbind()),e=t.create()),e.isComposed?e.needsBindOnly&&(e.needsBindOnly=!1,e.bind(this.source,this.context)):(e.isComposed=!0,e.bind(this.source,this.context),e.insertBefore(this.target),this.target.$fastView=e,this.target.$fastTemplate=t)}else{const e=this.target.$fastView;void 0!==e&&e.isComposed&&(e.isComposed=!1,e.remove(),e.needsBindOnly?e.needsBindOnly=!1:e.unbind()),this.target.textContent=t}}function ms(t){this.target[this.targetName]=t}function vs(t){const e=this.classVersions||Object.create(null),i=this.target;let o=this.version||0;if(null!=t&&t.length){const s=t.split(/\s+/);for(let t=0,n=s.length;t<n;++t){const n=s[t];""!==n&&(e[n]=o,i.classList.add(n))}}if(this.classVersions=e,this.version=o+1,0!==o){o-=1;for(const t in e)e[t]===o&&i.classList.remove(t)}}class ys extends as{constructor(t){super(),this.binding=t,this.bind=cs,this.unbind=ds,this.updateTarget=fs,this.isBindingVolatile=F.isVolatileBinding(this.binding)}get targetName(){return this.originalTargetName}set targetName(t){if(this.originalTargetName=t,void 0!==t)switch(t[0]){case":":if(this.cleanedTargetName=t.substr(1),this.updateTarget=ms,"innerHTML"===this.cleanedTargetName){const t=this.binding;this.binding=(e,i)=>m.createHTML(t(e,i))}break;case"?":this.cleanedTargetName=t.substr(1),this.updateTarget=gs;break;case"@":this.cleanedTargetName=t.substr(1),this.bind=hs,this.unbind=ps;break;default:this.cleanedTargetName=t,"class"===t&&(this.updateTarget=vs)}}targetAtContent(){this.updateTarget=bs,this.unbind=us}createBehavior(t){return new xs(t,this.binding,this.isBindingVolatile,this.bind,this.unbind,this.updateTarget,this.cleanedTargetName)}}class xs{constructor(t,e,i,o,s,n,r){this.source=null,this.context=null,this.bindingObserver=null,this.target=t,this.binding=e,this.isBindingVolatile=i,this.bind=o,this.unbind=s,this.updateTarget=n,this.targetName=r}handleChange(){this.updateTarget(this.bindingObserver.observe(this.source,this.context))}handleEvent(t){L(t);const e=this.binding(this.source,this.context);L(null),!0!==e&&t.preventDefault()}}let ws=null;class $s{addFactory(t){t.targetIndex=this.targetIndex,this.behaviorFactories.push(t)}captureContentBinding(t){t.targetAtContent(),this.addFactory(t)}reset(){this.behaviorFactories=[],this.targetIndex=-1}release(){ws=this}static borrow(t){const e=ws||new $s;return e.directives=t,e.reset(),ws=null,e}}function Cs(t){if(1===t.length)return t[0];let e;const i=t.length,o=t.map((t=>"string"==typeof t?()=>t:(e=t.targetName||e,t.binding))),s=new ys(((t,e)=>{let s="";for(let n=0;n<i;++n)s+=o[n](t,e);return s}));return s.targetName=e,s}const ks=b.length;function Is(t,e){const i=e.split(g);if(1===i.length)return null;const o=[];for(let e=0,s=i.length;e<s;++e){const s=i[e],n=s.indexOf(b);let r;if(-1===n)r=s;else{const e=parseInt(s.substring(0,n));o.push(t.directives[e]),r=s.substring(n+ks)}""!==r&&o.push(r)}return o}function Ts(t,e,i=!1){const o=e.attributes;for(let s=0,n=o.length;s<n;++s){const r=o[s],a=r.value,l=Is(t,a);let c=null;null===l?i&&(c=new ys((()=>a)),c.targetName=r.name):c=Cs(l),null!==c&&(e.removeAttributeNode(r),s--,n--,t.addFactory(c))}}function Ss(t,e,i){const o=Is(t,e.textContent);if(null!==o){let s=e;for(let n=0,r=o.length;n<r;++n){const r=o[n],a=0===n?e:s.parentNode.insertBefore(document.createTextNode(""),s.nextSibling);"string"==typeof r?a.textContent=r:(a.textContent=" ",t.captureContentBinding(r)),s=a,t.targetIndex++,a!==e&&i.nextNode()}t.targetIndex--}}const Vs=document.createRange();class Os{constructor(t,e){this.fragment=t,this.behaviors=e,this.source=null,this.context=null,this.firstChild=t.firstChild,this.lastChild=t.lastChild}appendTo(t){t.appendChild(this.fragment)}insertBefore(t){if(this.fragment.hasChildNodes())t.parentNode.insertBefore(this.fragment,t);else{const e=t.parentNode,i=this.lastChild;let o,s=this.firstChild;for(;s!==i;)o=s.nextSibling,e.insertBefore(s,t),s=o;e.insertBefore(i,t)}}remove(){const t=this.fragment,e=this.lastChild;let i,o=this.firstChild;for(;o!==e;)i=o.nextSibling,t.appendChild(o),o=i;t.appendChild(e)}dispose(){const t=this.firstChild.parentNode,e=this.lastChild;let i,o=this.firstChild;for(;o!==e;)i=o.nextSibling,t.removeChild(o),o=i;t.removeChild(e);const s=this.behaviors,n=this.source;for(let t=0,e=s.length;t<e;++t)s[t].unbind(n)}bind(t,e){const i=this.behaviors;if(this.source!==t)if(null!==this.source){const o=this.source;this.source=t,this.context=e;for(let s=0,n=i.length;s<n;++s){const n=i[s];n.unbind(o),n.bind(t,e)}}else{this.source=t,this.context=e;for(let o=0,s=i.length;o<s;++o)i[o].bind(t,e)}}unbind(){if(null===this.source)return;const t=this.behaviors,e=this.source;for(let i=0,o=t.length;i<o;++i)t[i].unbind(e);this.source=null}static disposeContiguousBatch(t){if(0!==t.length){Vs.setStartBefore(t[0].firstChild),Vs.setEndAfter(t[t.length-1].lastChild),Vs.deleteContents();for(let e=0,i=t.length;e<i;++e){const i=t[e],o=i.behaviors,s=i.source;for(let t=0,e=o.length;t<e;++t)o[t].unbind(s)}}}}class Fs{constructor(t,e){this.behaviorCount=0,this.hasHostBehaviors=!1,this.fragment=null,this.targetOffset=0,this.viewBehaviorFactories=null,this.hostBehaviorFactories=null,this.html=t,this.directives=e}create(t){if(null===this.fragment){let t;const e=this.html;if("string"==typeof e){t=document.createElement("template"),t.innerHTML=m.createHTML(e);const i=t.content.firstElementChild;null!==i&&"TEMPLATE"===i.tagName&&(t=i)}else t=e;const i=function(t,e){const i=t.content;document.adoptNode(i);const o=$s.borrow(e);Ts(o,t,!0);const s=o.behaviorFactories;o.reset();const n=m.createTemplateWalker(i);let r;for(;r=n.nextNode();)switch(o.targetIndex++,r.nodeType){case 1:Ts(o,r);break;case 3:Ss(o,r,n);break;case 8:m.isMarker(r)&&o.addFactory(e[m.extractDirectiveIndexFromMarker(r)])}let a=0;(m.isMarker(i.firstChild)||1===i.childNodes.length&&e.length)&&(i.insertBefore(document.createComment(""),i.firstChild),a=-1);const l=o.behaviorFactories;return o.release(),{fragment:i,viewBehaviorFactories:l,hostBehaviorFactories:s,targetOffset:a}}(t,this.directives);this.fragment=i.fragment,this.viewBehaviorFactories=i.viewBehaviorFactories,this.hostBehaviorFactories=i.hostBehaviorFactories,this.targetOffset=i.targetOffset,this.behaviorCount=this.viewBehaviorFactories.length+this.hostBehaviorFactories.length,this.hasHostBehaviors=this.hostBehaviorFactories.length>0}const e=this.fragment.cloneNode(!0),i=this.viewBehaviorFactories,o=new Array(this.behaviorCount),s=m.createTemplateWalker(e);let n=0,r=this.targetOffset,a=s.nextNode();for(let t=i.length;n<t;++n){const t=i[n],e=t.targetIndex;for(;null!==a;){if(r===e){o[n]=t.createBehavior(a);break}a=s.nextNode(),r++}}if(this.hasHostBehaviors){const e=this.hostBehaviorFactories;for(let i=0,s=e.length;i<s;++i,++n)o[n]=e[i].createBehavior(t)}return new Os(e,o)}render(t,e,i){"string"==typeof e&&(e=document.getElementById(e)),void 0===i&&(i=e);const o=this.create(i);return o.bind(t,B),o.appendTo(e),o}}const Ds=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function As(t,...e){const i=[];let o="";for(let s=0,n=t.length-1;s<n;++s){const n=t[s];let r=e[s];if(o+=n,r instanceof Fs){const t=r;r=()=>t}if("function"==typeof r&&(r=new ys(r)),r instanceof as){const t=Ds.exec(n);null!==t&&(r.targetName=t[2])}r instanceof rs?(o+=r.createPlaceholder(i.length),i.push(r)):o+=r}return o+=t[t.length-1],new Fs(o,i)}class Ns{constructor(t,e){this.target=t,this.propertyName=e}bind(t){t[this.propertyName]=this.target}unbind(){}}function Ps(t){return new ls("fast-ref",Ns,t)}class Ls{handleStartContentChange(){this.startContainer.classList.toggle("start",this.start.assignedNodes().length>0)}handleEndContentChange(){this.endContainer.classList.toggle("end",this.end.assignedNodes().length>0)}}const Ms=As`
    <span part="end" ${Ps("endContainer")}>
        <slot
            name="end"
            ${Ps("end")}
            @slotchange="${t=>t.handleEndContentChange()}"
        ></slot>
    </span>
`,Bs=As`
    <span part="start" ${Ps("startContainer")}>
        <slot
            name="start"
            ${Ps("start")}
            @slotchange="${t=>t.handleStartContentChange()}"
        ></slot>
    </span>
`;function Es(t,...e){e.forEach((e=>{if(Object.getOwnPropertyNames(e.prototype).forEach((i=>{"constructor"!==i&&Object.defineProperty(t.prototype,i,Object.getOwnPropertyDescriptor(e.prototype,i))})),e.attributes){const i=t.attributes||[];t.attributes=i.concat(e.attributes)}}))}var Hs;!function(t){t[t.alt=18]="alt",t[t.arrowDown=40]="arrowDown",t[t.arrowLeft=37]="arrowLeft",t[t.arrowRight=39]="arrowRight",t[t.arrowUp=38]="arrowUp",t[t.back=8]="back",t[t.backSlash=220]="backSlash",t[t.break=19]="break",t[t.capsLock=20]="capsLock",t[t.closeBracket=221]="closeBracket",t[t.colon=186]="colon",t[t.colon2=59]="colon2",t[t.comma=188]="comma",t[t.ctrl=17]="ctrl",t[t.delete=46]="delete",t[t.end=35]="end",t[t.enter=13]="enter",t[t.equals=187]="equals",t[t.equals2=61]="equals2",t[t.equals3=107]="equals3",t[t.escape=27]="escape",t[t.forwardSlash=191]="forwardSlash",t[t.function1=112]="function1",t[t.function10=121]="function10",t[t.function11=122]="function11",t[t.function12=123]="function12",t[t.function2=113]="function2",t[t.function3=114]="function3",t[t.function4=115]="function4",t[t.function5=116]="function5",t[t.function6=117]="function6",t[t.function7=118]="function7",t[t.function8=119]="function8",t[t.function9=120]="function9",t[t.home=36]="home",t[t.insert=45]="insert",t[t.menu=93]="menu",t[t.minus=189]="minus",t[t.minus2=109]="minus2",t[t.numLock=144]="numLock",t[t.numPad0=96]="numPad0",t[t.numPad1=97]="numPad1",t[t.numPad2=98]="numPad2",t[t.numPad3=99]="numPad3",t[t.numPad4=100]="numPad4",t[t.numPad5=101]="numPad5",t[t.numPad6=102]="numPad6",t[t.numPad7=103]="numPad7",t[t.numPad8=104]="numPad8",t[t.numPad9=105]="numPad9",t[t.numPadDivide=111]="numPadDivide",t[t.numPadDot=110]="numPadDot",t[t.numPadMinus=109]="numPadMinus",t[t.numPadMultiply=106]="numPadMultiply",t[t.numPadPlus=107]="numPadPlus",t[t.openBracket=219]="openBracket",t[t.pageDown=34]="pageDown",t[t.pageUp=33]="pageUp",t[t.period=190]="period",t[t.print=44]="print",t[t.quote=222]="quote",t[t.scrollLock=145]="scrollLock",t[t.shift=16]="shift",t[t.space=32]="space",t[t.tab=9]="tab",t[t.tilde=192]="tilde",t[t.windowsLeft=91]="windowsLeft",t[t.windowsOpera=219]="windowsOpera",t[t.windowsRight=92]="windowsRight"}(Hs||(Hs={}));const Rs="form-associated-proxy",js="ElementInternals"in window&&"setFormValue"in window.ElementInternals.prototype,zs=new Map;function _s(t){const e=class extends t{constructor(...t){super(...t),this.dirtyValue=!1,this.disabled=!1,this.proxyEventsToBlock=["change","click"],this.formDisabledCallback=t=>{this.disabled=t},this.formResetCallback=()=>{this.value=this.initialValue,this.dirtyValue=!1},this.proxyInitialized=!1,this.required=!1,this.initialValue=this.initialValue||""}static get formAssociated(){return js}get validity(){return this.elementInternals?this.elementInternals.validity:this.proxy.validity}get form(){return this.elementInternals?this.elementInternals.form:this.proxy.form}get validationMessage(){return this.elementInternals?this.elementInternals.validationMessage:this.proxy.validationMessage}get willValidate(){return this.elementInternals?this.elementInternals.willValidate:this.proxy.willValidate}get labels(){if(this.elementInternals)return Object.freeze(Array.from(this.elementInternals.labels));if(this.proxy instanceof HTMLElement&&this.proxy.ownerDocument&&this.id){const t=this.proxy.labels,e=Array.from(this.proxy.getRootNode().querySelectorAll(`[for='${this.id}']`)),i=t?e.concat(Array.from(t)):e;return Object.freeze(i)}return r}valueChanged(t,e){this.dirtyValue=!0,this.proxy instanceof HTMLElement&&(this.proxy.value=this.value),this.setFormValue(this.value),this.validate()}initialValueChanged(t,e){this.dirtyValue||(this.value=this.initialValue,this.dirtyValue=!1)}disabledChanged(t,e){this.proxy instanceof HTMLElement&&(this.proxy.disabled=this.disabled),m.queueUpdate((()=>this.classList.toggle("disabled",this.disabled)))}nameChanged(t,e){this.proxy instanceof HTMLElement&&(this.proxy.name=this.name)}requiredChanged(t,e){this.proxy instanceof HTMLElement&&(this.proxy.required=this.required),m.queueUpdate((()=>this.classList.toggle("required",this.required))),this.validate()}get elementInternals(){if(!js)return null;let t=zs.get(this);return t||(t=this.attachInternals(),zs.set(this,t)),t}connectedCallback(){super.connectedCallback(),this.addEventListener("keypress",this._keypressHandler),this.value||(this.value=this.initialValue,this.dirtyValue=!1),this.elementInternals||this.attachProxy(),this.form&&this.form.addEventListener("reset",this.formResetCallback)}disconnectedCallback(){this.proxyEventsToBlock.forEach((t=>this.proxy.removeEventListener(t,this.stopPropagation))),this.form&&this.form.removeEventListener("reset",this.formResetCallback)}checkValidity(){return this.elementInternals?this.elementInternals.checkValidity():this.proxy.checkValidity()}reportValidity(){return this.elementInternals?this.elementInternals.reportValidity():this.proxy.reportValidity()}setValidity(t,e,i){this.elementInternals?this.elementInternals.setValidity(t,e,i):"string"==typeof e&&this.proxy.setCustomValidity(e)}attachProxy(){var t;this.proxyInitialized||(this.proxyInitialized=!0,this.proxy.style.display="none",this.proxyEventsToBlock.forEach((t=>this.proxy.addEventListener(t,this.stopPropagation))),this.proxy.disabled=this.disabled,this.proxy.required=this.required,"string"==typeof this.name&&(this.proxy.name=this.name),"string"==typeof this.value&&(this.proxy.value=this.value),this.proxy.setAttribute("slot",Rs),this.proxySlot=document.createElement("slot"),this.proxySlot.setAttribute("name",Rs)),null===(t=this.shadowRoot)||void 0===t||t.appendChild(this.proxySlot),this.appendChild(this.proxy)}detachProxy(){var t;this.removeChild(this.proxy),null===(t=this.shadowRoot)||void 0===t||t.removeChild(this.proxySlot)}validate(){this.proxy instanceof HTMLElement&&this.setValidity(this.proxy.validity,this.proxy.validationMessage)}setFormValue(t,e){this.elementInternals&&this.elementInternals.setFormValue(t,e||t)}_keypressHandler(t){switch(t.keyCode){case 13:if(this.form instanceof HTMLFormElement){const t=this.form.querySelector("[type=submit]");null==t||t.click()}}}stopPropagation(t){t.stopPropagation()}};return K({mode:"boolean"})(e.prototype,"disabled"),K({mode:"fromView",attribute:"value"})(e.prototype,"initialValue"),K(e.prototype,"name"),K({mode:"boolean"})(e.prototype,"required"),N(e.prototype,"value"),e}class qs extends st{constructor(){super(...arguments),this._presentation=void 0}get $presentation(){return void 0===this._presentation&&(this._presentation=ee.forTag(this.tagName,this)),this._presentation}templateChanged(){void 0!==this.template&&(this.$fastController.template=this.template)}stylesChanged(){void 0!==this.styles&&(this.$fastController.styles=this.styles)}connectedCallback(){null!==this.$presentation&&this.$presentation.applyTo(this),super.connectedCallback()}static compose(t){return(e={})=>new Us(this===qs?class extends qs{}:this,t,e)}}function Gs(t,e,i){return"function"==typeof t?t(e,i):t}o([N],qs.prototype,"template",void 0),o([N],qs.prototype,"styles",void 0);class Us{constructor(t,e,i){this.type=t,this.elementDefinition=e,this.overrideDefinition=i,this.definition=Object.assign(Object.assign({},this.elementDefinition),this.overrideDefinition)}register(t){const e=this.definition,i=this.overrideDefinition,o=t.get(oe),s=`${e.prefix||o.elementPrefix}-${e.baseName}`;o.tryDefineElement(s,this.type,(t=>{const o=new ie(Gs(e.template,t,e),Gs(e.styles,t,e));t.definePresentation(o);let s=Gs(e.shadowOptions,t,e);t.shadowRootMode&&(s?i.shadowOptions||(s.mode=t.shadowRootMode):null!==s&&(s={mode:t.shadowRootMode})),t.defineElement({elementOptions:Gs(e.elementOptions,t,e),shadowOptions:s,attributes:Gs(e.attributes,t,e)})}))}}class Ws extends qs{}class Ks extends(_s(Ws)){constructor(){super(...arguments),this.proxy=document.createElement("input")}}class Ys extends Ks{constructor(){super(...arguments),this.handleSubmission=()=>{if(!this.form)return;const t=this.proxy.isConnected;t||this.attachProxy(),"function"==typeof this.form.requestSubmit?this.form.requestSubmit(this.proxy):this.proxy.click(),t||this.detachProxy()},this.handleFormReset=()=>{var t;null===(t=this.form)||void 0===t||t.reset()}}formactionChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formAction=this.formaction)}formenctypeChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formEnctype=this.formenctype)}formmethodChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formMethod=this.formmethod)}formnovalidateChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formNoValidate=this.formnovalidate)}formtargetChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formTarget=this.formtarget)}typeChanged(t,e){this.proxy instanceof HTMLInputElement&&(this.proxy.type=this.type),"submit"===e&&this.addEventListener("click",this.handleSubmission),"submit"===t&&this.removeEventListener("click",this.handleSubmission),"reset"===e&&this.addEventListener("click",this.handleFormReset),"reset"===t&&this.removeEventListener("click",this.handleFormReset)}connectedCallback(){super.connectedCallback(),this.proxy.setAttribute("type",this.type)}}o([K({mode:"boolean"})],Ys.prototype,"autofocus",void 0),o([K({attribute:"form"})],Ys.prototype,"formId",void 0),o([K],Ys.prototype,"formaction",void 0),o([K],Ys.prototype,"formenctype",void 0),o([K],Ys.prototype,"formmethod",void 0),o([K({mode:"boolean"})],Ys.prototype,"formnovalidate",void 0),o([K],Ys.prototype,"formtarget",void 0),o([K],Ys.prototype,"type",void 0),o([N],Ys.prototype,"defaultSlottedContent",void 0);class Qs{}o([K({attribute:"aria-expanded",mode:"fromView"})],Qs.prototype,"ariaExpanded",void 0),o([K({attribute:"aria-pressed",mode:"fromView"})],Qs.prototype,"ariaPressed",void 0),Es(Qs,ns),Es(Ys,Ls,Qs);class Xs extends class{constructor(t,e){this.target=t,this.options=e,this.source=null}bind(t){const e=this.options.property;this.shouldUpdate=F.getAccessors(t).some((t=>t.name===e)),this.source=t,this.updateTarget(this.computeNodes()),this.shouldUpdate&&this.observe()}unbind(){this.updateTarget(r),this.source=null,this.shouldUpdate&&this.disconnect()}handleEvent(){this.updateTarget(this.computeNodes())}computeNodes(){let t=this.getNodes();return void 0!==this.options.filter&&(t=t.filter(this.options.filter)),t}updateTarget(t){this.source[this.options.property]=t}}{constructor(t,e){super(t,e)}observe(){this.target.addEventListener("slotchange",this)}disconnect(){this.target.removeEventListener("slotchange",this)}getNodes(){return this.target.assignedNodes(this.options)}}function Zs(t){return"string"==typeof t&&(t={property:t}),new ls("fast-slotted",Xs,t)}const Js=(t,e)=>As`
    <button
        class="control"
        part="control"
        ?autofocus="${t=>t.autofocus}"
        ?disabled="${t=>t.disabled}"
        form="${t=>t.formId}"
        formaction="${t=>t.formaction}"
        formenctype="${t=>t.formenctype}"
        formmethod="${t=>t.formmethod}"
        formnovalidate="${t=>t.formnovalidate}"
        formtarget="${t=>t.formtarget}"
        name="${t=>t.name}"
        type="${t=>t.type}"
        value="${t=>t.value}"
        aria-atomic="${t=>t.ariaAtomic}"
        aria-busy="${t=>t.ariaBusy}"
        aria-controls="${t=>t.ariaControls}"
        aria-current="${t=>t.ariaCurrent}"
        aria-describedBy="${t=>t.ariaDescribedby}"
        aria-details="${t=>t.ariaDetails}"
        aria-disabled="${t=>t.ariaDisabled}"
        aria-errormessage="${t=>t.ariaErrormessage}"
        aria-expanded="${t=>t.ariaExpanded}"
        aria-flowto="${t=>t.ariaFlowto}"
        aria-haspopup="${t=>t.ariaHaspopup}"
        aria-hidden="${t=>t.ariaHidden}"
        aria-invalid="${t=>t.ariaInvalid}"
        aria-keyshortcuts="${t=>t.ariaKeyshortcuts}"
        aria-label="${t=>t.ariaLabel}"
        aria-labelledby="${t=>t.ariaLabelledby}"
        aria-live="${t=>t.ariaLive}"
        aria-owns="${t=>t.ariaOwns}"
        aria-pressed="${t=>t.ariaPressed}"
        aria-relevant="${t=>t.ariaRelevant}"
        aria-roledescription="${t=>t.ariaRoledescription}"
        ${Ps("control")}
    >
        ${Bs}
        <span class="content" part="content">
            <slot ${Zs("defaultSlottedContent")}></slot>
        </span>
        ${Ms}
    </button>
`,tn="not-allowed";class en extends class{constructor(t){this.listenerCache=new WeakMap,this.query=t}bind(t){const{query:e}=this,i=this.constructListener(t);i.bind(e)(),e.addListener(i),this.listenerCache.set(t,i)}unbind(t){const e=this.listenerCache.get(t);e&&(this.query.removeListener(e),this.listenerCache.delete(t))}}{constructor(t,e){super(t),this.styles=e}static with(t){return e=>new en(t,e)}constructListener(t){let e=!1;const i=this.styles;return function(){const{matches:o}=this;o&&!e?(t.$fastController.addStyles(i),e=o):!o&&e&&(t.$fastController.removeStyles(i),e=o)}}unbind(t){super.unbind(t),t.$fastController.removeStyles(this.styles)}}const on=en.with(window.matchMedia("(forced-colors)"));var sn;function nn(t){return`:host([hidden]){display:none}:host{display:${t}}`}en.with(window.matchMedia("(prefers-color-scheme: dark)")),en.with(window.matchMedia("(prefers-color-scheme: light)")),function(t){t.Canvas="Canvas",t.CanvasText="CanvasText",t.LinkText="LinkText",t.VisitedText="VisitedText",t.ActiveText="ActiveText",t.ButtonFace="ButtonFace",t.ButtonText="ButtonText",t.Field="Field",t.FieldText="FieldText",t.Highlight="Highlight",t.HighlightText="HighlightText",t.GrayText="GrayText"}(sn||(sn={}));const rn="object"==typeof global&&global&&global.Object===Object&&global;var an="object"==typeof self&&self&&self.Object===Object&&self;const ln=(rn||an||Function("return this")()).Symbol;var cn=Object.prototype,hn=cn.hasOwnProperty,dn=cn.toString,un=ln?ln.toStringTag:void 0;var pn=Object.prototype.toString;var fn=ln?ln.toStringTag:void 0;const gn=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":fn&&fn in Object(t)?function(t){var e=hn.call(t,un),i=t[un];try{t[un]=void 0;var o=!0}catch(t){}var s=dn.call(t);return o&&(e?t[un]=i:delete t[un]),s}(t):function(t){return pn.call(t)}(t)},bn=function(t){return null!=t&&"object"==typeof t};let mn;const vn=function(){if(!0===(t=mn)||!1===t||bn(t)&&"[object Boolean]"==gn(t))return mn;var t;if("undefined"==typeof window||!window.document||!window.document.createElement)return mn=!1,mn;const e=document.createElement("style"),i=function(){const t=document.querySelector('meta[property="csp-nonce"]');return t?t.getAttribute("content"):null}();null!==i&&e.setAttribute("nonce",i),document.head.appendChild(e);try{e.sheet.insertRule("foo:focus-visible {color:inherit}",0),mn=!0}catch(t){mn=!1}finally{document.head.removeChild(e)}return mn}()?"focus-visible":"focus",yn=(function(t,...e){const{styles:i,behaviors:o}=rt(t,e);return new lt(i,o)})`(${fi} + ${mi}) * ${vi}`,xn=at`
    ${nn("inline-flex")} :host {
        font-family: ${pi};
        outline: none;
        font-size: ${$i};
        line-height: ${Ci};
        height: calc(${yn} * 1px);
        min-width: calc(${yn} * 1px);
        background-color: ${Ao};
        color: ${Zo};
        border-radius: calc(${bi} * 1px);
        fill: currentcolor;
        cursor: pointer;
    }

    .control {
        background: transparent;
        height: inherit;
        flex-grow: 1;
        box-sizing: border-box;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        padding: 0 calc((10 + (${vi} * 2 * ${mi})) * 1px);
        white-space: nowrap;
        outline: none;
        text-decoration: none;
        border: calc(${xi} * 1px) solid transparent;
        color: inherit;
        border-radius: inherit;
        fill: inherit;
        cursor: inherit;
        font-family: inherit;
        font-size: inherit;
        line-height: inherit;
    }

    :host(:hover) {
        background-color: ${No};
    }

    :host(:active) {
        background-color: ${Po};
    }

    .control:${vn} {
        border-color: ${Uo};
        box-shadow: 0 0 0 calc((${wi} - ${xi}) * 1px) ${Uo} inset;
    }

    .control::-moz-focus-inner {
        border: 0;
    }

    .start,
    .end {
        display: flex;
    }

    .control.icon-only {
        padding: 0;
        line-height: 0;
    }

    ::slotted(svg) {
        ${""} width: 16px;
        height: 16px;
        pointer-events: none;
    }

    .start {
        margin-inline-end: 11px;
    }

    .end {
        margin-inline-start: 11px;
    }
`.withBehaviors(on(at`
            :host .control {
              background-color: ${sn.ButtonFace};
              border-color: ${sn.ButtonText};
              color: ${sn.ButtonText};
              fill: currentColor;
            }
    
            :host(:hover) .control {
              forced-color-adjust: none;
              background-color: ${sn.Highlight};
              color: ${sn.HighlightText};
            }

            .control:${vn} {
              forced-color-adjust: none;
              background-color: ${sn.Highlight};
              border-color: ${sn.ButtonText};
              box-shadow: 0 0 0 calc((${wi} - ${xi}) * 1px) ${sn.ButtonText} inset;
              color: ${sn.HighlightText};
            }

            .control:hover,
            :host([appearance="outline"]) .control:hover {
              border-color: ${sn.ButtonText};
            }

            :host([href]) .control {
                border-color: ${sn.LinkText};
                color: ${sn.LinkText};
            }

            :host([href]) .control:hover,
            :host([href]) .control:${vn}{
              forced-color-adjust: none;
              background: ${sn.ButtonFace};
              border-color: ${sn.LinkText};
              box-shadow: 0 0 0 1px ${sn.LinkText} inset;
              color: ${sn.LinkText};
              fill: currentColor;
            }
        `)),wn=at`
    :host([appearance="accent"]) {
        background: ${go};
        color: ${wo};
    }

    :host([appearance="accent"]:hover) {
        background: ${bo};
        color: ${$o};
    }

    :host([appearance="accent"]:active) .control:active {
        background: ${mo};
        color: ${Co};
    }

    :host([appearance="accent"]) .control:${vn} {
        box-shadow: 0 0 0 calc((${wi} - ${xi}) * 1px) ${Uo} inset,
            0 0 0 calc((${wi} + ${xi}) * 1px) ${Ko} inset;
    }
`.withBehaviors(on(at`
            :host([appearance="accent"]) .control {
                forced-color-adjust: none;
                background: ${sn.Highlight};
                color: ${sn.HighlightText};
            }

            :host([appearance="accent"]) .control:hover,
            :host([appearance="accent"]:active) .control:active {
                background: ${sn.HighlightText};
                border-color: ${sn.Highlight};
                color: ${sn.Highlight};
            }

            :host([appearance="accent"]) .control:${vn} {
                border-color: ${sn.Highlight};
                box-shadow: 0 0 0 calc(${wi} * 1px) ${sn.HighlightText} inset;
            }

            :host([appearance="accent"][href]) .control{
                background: ${sn.LinkText};
                color: ${sn.HighlightText};
            }

            :host([appearance="accent"][href]) .control:hover {
                background: ${sn.ButtonFace};
                border-color: ${sn.LinkText};
                box-shadow: none;
                color: ${sn.LinkText};
                fill: currentColor;
            }

            :host([appearance="accent"][href]) .control:${vn} {
                border-color: ${sn.LinkText};
                box-shadow: 0 0 0 calc(${wi} * 1px) ${sn.HighlightText} inset;
            }
        `)),$n=(at`
    :host([appearance="hypertext"]) {
        font-size: inherit;
        line-height: inherit;
        height: auto;
        min-width: 0;
        background: transparent;
    }

    :host([appearance="hypertext"]) .control {
        display: inline;
        padding: 0;
        border: none;
        box-shadow: none;
        border-radius: 0;
        line-height: 1;
    }

    :host a.control:not(:link) {
        background-color: transparent;
        cursor: default;
    }
    :host([appearance="hypertext"]) .control:link,
    :host([appearance="hypertext"]) .control:visited {
        background: transparent;
        color: ${Vo};
        border-bottom: calc(${xi} * 1px) solid ${Vo};
    }

    :host([appearance="hypertext"]:hover),
    :host([appearance="hypertext"]) .control:hover {
        background: transparent;
        border-bottom-color: ${Oo};
    }

    :host([appearance="hypertext"]:active),
    :host([appearance="hypertext"]) .control:active {
        background: transparent;
        border-bottom-color: ${Fo};
    }

    :host([appearance="hypertext"]) .control:${vn} {
        border-bottom: calc(${wi} * 1px) solid ${Uo};
        margin-bottom: calc(calc(${xi} - ${wi}) * 1px);
    }
`.withBehaviors(on(at`
            :host([appearance="hypertext"]:hover) {
                background-color: ${sn.ButtonFace};
                color: ${sn.ButtonText};
            }
            :host([appearance="hypertext"][href]) .control:hover,
            :host([appearance="hypertext"][href]) .control:active,
            :host([appearance="hypertext"][href]) .control:${vn} {
                color: ${sn.LinkText};
                border-bottom-color: ${sn.LinkText};
                box-shadow: none;
            }
        `)),at`
    :host([appearance="lightweight"]) {
        background: transparent;
        color: ${Vo};
    }

    :host([appearance="lightweight"]) .control {
        padding: 0;
        height: initial;
        border: none;
        box-shadow: none;
        border-radius: 0;
    }

    :host([appearance="lightweight"]:hover) {
        background: transparent;
        color: ${Oo};
    }

    :host([appearance="lightweight"]:active) {
        background: transparent;
        color: ${Fo};
    }

    :host([appearance="lightweight"]) .content {
        position: relative;
    }

    :host([appearance="lightweight"]) .content::before {
        content: "";
        display: block;
        height: calc(${xi} * 1px);
        position: absolute;
        top: calc(1em + 4px);
        width: 100%;
    }

    :host([appearance="lightweight"]:hover) .content::before {
        background: ${Oo};
    }

    :host([appearance="lightweight"]:active) .content::before {
        background: ${Fo};
    }

    :host([appearance="lightweight"]) .control:${vn} .content::before {
        background: ${Zo};
        height: calc(${wi} * 1px);
    }
`.withBehaviors(on(at`
            :host([appearance="lightweight"]) .control:hover,
            :host([appearance="lightweight"]) .control:${vn} {
                forced-color-adjust: none;
                background: ${sn.ButtonFace};
                color: ${sn.Highlight};
            }
            :host([appearance="lightweight"]) .control:hover .content::before,
            :host([appearance="lightweight"]) .control:${vn} .content::before {
                background: ${sn.Highlight};
            }

            :host([appearance="lightweight"][href]) .control:hover,
            :host([appearance="lightweight"][href]) .control:${vn} {
                background: ${sn.ButtonFace};
                box-shadow: none;
                color: ${sn.LinkText};
            }

            :host([appearance="lightweight"][href]) .control:hover .content::before,
            :host([appearance="lightweight"][href]) .control:${vn} .content::before {
                background: ${sn.LinkText};
            }
        `))),Cn=at`
    :host([appearance="outline"]) {
        background: transparent;
        border-color: ${go};
    }

    :host([appearance="outline"]:hover) {
        border-color: ${bo};
    }

    :host([appearance="outline"]:active) {
        border-color: ${mo};
    }

    :host([appearance="outline"]) .control {
        border-color: inherit;
    }

    :host([appearance="outline"]) .control:${vn} {
        box-shadow: 0 0 0 calc((${wi} - ${xi}) * 1px) ${Uo} inset;
        border-color: ${Uo};
    }
`.withBehaviors(on(at`
            :host([appearance="outline"]) .control {
                border-color: ${sn.ButtonText};
            }
            :host([appearance="outline"]) .control:${vn} {
              forced-color-adjust: none;
              background-color: ${sn.Highlight};
              border-color: ${sn.ButtonText};
              box-shadow: 0 0 0 calc((${wi} - ${xi}) * 1px) ${sn.ButtonText} inset;
              color: ${sn.HighlightText};
              fill: currentColor;
            }
            :host([appearance="outline"][href]) .control {
                background: ${sn.ButtonFace};
                border-color: ${sn.LinkText};
                color: ${sn.LinkText};
                fill: currentColor;
            }
            :host([appearance="outline"][href]) .control:hover,
            :host([appearance="outline"][href]) .control:${vn} {
              forced-color-adjust: none;
              border-color: ${sn.LinkText};
              box-shadow: 0 0 0 1px ${sn.LinkText} inset;
            }
        `)),kn=at`
    :host([appearance="stealth"]) {
        background: ${Ro};
    }

    :host([appearance="stealth"]:hover) {
        background: ${jo};
    }

    :host([appearance="stealth"]:active) {
        background: ${zo};
    }
`.withBehaviors(on(at`
            :host([appearance="stealth"]),
            :host([appearance="stealth"]) .control {
                forced-color-adjust: none;
                background: ${sn.ButtonFace};
                border-color: transparent;
                color: ${sn.ButtonText};
                fill: currentColor;
            }

            :host([appearance="stealth"]:hover) .control {
                background: ${sn.Highlight};
                border-color: ${sn.Highlight};
                color: ${sn.HighlightText};
                fill: currentColor;
            }

            :host([appearance="stealth"]:${vn}) .control {
                background: ${sn.Highlight};
                box-shadow: 0 0 0 1px ${sn.Highlight};
                color: ${sn.HighlightText};
                fill: currentColor;
            }

            :host([appearance="stealth"][href]) .control {
                color: ${sn.LinkText};
            }

            :host([appearance="stealth"][href]:hover) .control,
            :host([appearance="stealth"][href]:${vn}) .control {
                background: ${sn.LinkText};
                border-color: ${sn.LinkText};
                color: ${sn.HighlightText};
                fill: currentColor;
            }

            :host([appearance="stealth"][href]:${vn}) .control {
                forced-color-adjust: none;
                box-shadow: 0 0 0 1px ${sn.LinkText};
            }
        `));class In{constructor(t,e,i){this.propertyName=t,this.value=e,this.styles=i}bind(t){F.getNotifier(t).subscribe(this,this.propertyName),this.handleChange(t,this.propertyName)}unbind(t){F.getNotifier(t).unsubscribe(this,this.propertyName),t.$fastController.removeStyles(this.styles)}handleChange(t,e){t[e]===this.value?t.$fastController.addStyles(this.styles):t.$fastController.removeStyles(this.styles)}}function Tn(t,e){return new In("appearance",t,e)}const Sn=(t,e)=>at`
        :host([disabled]),
        :host([disabled]:hover),
        :host([disabled]:active) {
            opacity: ${yi};
            background-color: ${Ao};
            cursor: ${tn};
        }

        ${xn}
    `.withBehaviors(on(at`
                :host([disabled]),
                :host([disabled]) .control,
                :host([disabled]:hover),
                :host([disabled]:active) {
                    forced-color-adjust: none;
                    background-color: ${sn.ButtonFace};
                    border-color: ${sn.GrayText};
                    color: ${sn.GrayText};
                    cursor: ${tn};
                    opacity: 1;
                }
            `),Tn("accent",at`
                :host([appearance="accent"][disabled]),
                :host([appearance="accent"][disabled]:hover),
                :host([appearance="accent"][disabled]:active) {
                    background: ${go};
                }

                ${wn}
            `.withBehaviors(on(at`
                        :host([appearance="accent"][disabled]) .control,
                        :host([appearance="accent"][disabled]) .control:hover {
                            background: ${sn.ButtonFace};
                            border-color: ${sn.GrayText};
                            color: ${sn.GrayText};
                        }
                    `))),Tn("lightweight",at`
                :host([appearance="lightweight"][disabled]:hover),
                :host([appearance="lightweight"][disabled]:active) {
                    background-color: transparent;
                    color: ${Vo};
                }

                :host([appearance="lightweight"][disabled]) .content::before,
                :host([appearance="lightweight"][disabled]:hover) .content::before,
                :host([appearance="lightweight"][disabled]:active) .content::before {
                    background: transparent;
                }

                ${$n}
            `.withBehaviors(on(at`
                        :host([appearance="lightweight"].disabled) .control {
                            forced-color-adjust: none;
                            color: ${sn.GrayText};
                        }

                        :host([appearance="lightweight"].disabled)
                            .control:hover
                            .content::before {
                            background: none;
                        }
                    `))),Tn("outline",at`
                :host([appearance="outline"][disabled]),
                :host([appearance="outline"][disabled]:hover),
                :host([appearance="outline"][disabled]:active) {
                    background: transparent;
                    border-color: ${go};
                }

                ${Cn}
            `.withBehaviors(on(at`
                        :host([appearance="outline"][disabled]) .control {
                            border-color: ${sn.GrayText};
                        }
                    `))),Tn("stealth",at`
                :host([appearance="stealth"][disabled]),
                :host([appearance="stealth"][disabled]:hover),
                :host([appearance="stealth"][disabled]:active) {
                    background: ${Ro};
                }

                ${kn}
            `.withBehaviors(on(at`
                        :host([appearance="stealth"][disabled]) {
                            background: ${sn.ButtonFace};
                        }

                        :host([appearance="stealth"][disabled]) .control {
                            background: ${sn.ButtonFace};
                            border-color: transparent;
                            color: ${sn.GrayText};
                        }
                    `))));class Vn extends Ys{connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="neutral")}defaultSlottedContentChanged(t,e){const i=this.defaultSlottedContent.filter((t=>t.nodeType===Node.ELEMENT_NODE));1===i.length&&i[0]instanceof SVGElement?this.control.classList.add("icon-only"):this.control.classList.remove("icon-only")}}o([K],Vn.prototype,"appearance",void 0);const On=Vn.compose({baseName:"button",template:Js,styles:Sn,shadowOptions:{delegatesFocus:!0}}),Fn=Sn,Dn={font:{default:'Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',heading:'Gilroy, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',mono:'"Roboto Mono", ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;'},ramp:{minus2:{fontSize:"0.75rem",lineHeight:"1rem"},minus1:{fontSize:"0.875rem",lineHeight:"1.25rem"},base:{fontSize:"1rem",lineHeight:"1.5rem"},plus1:{fontSize:"1.125rem",lineHeight:"1.75rem"},plus2:{fontSize:"1.25rem",lineHeight:"1.75rem"},plus3:{fontSize:"1.5rem",lineHeight:"2rem"},plus4:{fontSize:"1.875rem",lineHeight:"2.25rem"},plus5:{fontSize:"2.25rem",lineHeight:"2.5rem"},plus6:{fontSize:"3rem",lineHeight:"1"},plus7:{fontSize:"3.75rem",lineHeight:"1"},plus8:{fontSize:"4.5rem",lineHeight:"1"},plus9:{fontSize:"6rem",lineHeight:"1"},plus10:{fontSize:"8rem",lineHeight:"1"}}},An={yellow:"#f7bf2a",salmon:"#f26e7e",fuchsia:"#bd4c85",purple:"#8a3391",violet:"#805ac3",blue:"#4d5bd9"},Nn={white:"#ffffff",black:"#000000",brand:An,red:{100:"#fff5f5",200:"#fed7d7",300:"#feb2b2",400:"#fc8181",500:"#f56565",600:"#e53e3e",700:"#c53030",800:"#9b2c2c",900:"#742a2a"},gray:{100:"#f9f9fa",200:"#f2f2f4",300:"#e5e5e9",400:"#d8d9df",500:"#bebfc9",600:"#8e8f97",700:"#5f6065",800:"#2f3032",900:"#131314"},yellow:{100:"#fef9ea",200:"#fdf2d4",300:"#fce5aa",400:"#fad97f",500:"#f9cc55",600:An.yellow,700:"#c69922",800:"#947319",900:"#634c11"},salmon:{100:"#fef1f2",200:"#fce2e5",300:"#fac5cb",400:"#f7a8b2",500:"#f58b98",600:An.salmon,700:"#c25865",800:"#91424c",900:"#612c32"},fuchsia:{100:"#f8edf3",200:"#f2dbe7",300:"#e5b7ce",400:"#d794b6",500:"#ca709d",600:An.fuchsia,700:"#973d6a",800:"#712e50",900:"#4c1e35"},purple:{100:"#f3ebf4",200:"#e8d6e9",300:"#d0add3",400:"#b985bd",500:"#a15ca7",600:An.purple,700:"#6e2974",800:"#531f57",900:"#37143a"},violet:{100:"#f2eff9",200:"#e6def3",300:"#ccbde7",400:"#b39cdb",500:"#997bcf",600:An.violet,700:"#66489c",800:"#4d3675",900:"#33244e"},blue:{100:"#edeffb",200:"#dbdef7",300:"#b8bdf0",400:"#949de8",500:"#717ce1",600:An.blue,700:"#3e49ae",800:"#2e3782",900:"#1f2457"},orange:{100:"#fff7eb",200:"#fde6c4",300:"#fad49e",400:"#f6ba7e",500:"#ee975c",600:"#e17d47",700:"#d86131",800:"#ba4a2c",900:"#993d29"},green:{100:"#e0fff2",200:"#b2fbe0",300:"#81eeca",400:"#4ce1b4",500:"#2fc89f",600:"#25a78b",700:"#1d8673",800:"#19675b",900:"#155148"}},Pn="1rem",Ln={sm:"640px",md:"768px",lg:"1024px",xl:"1280px"};function Mn(t,e,i){return i<t?e:i>e?t:i}class Bn extends qs{constructor(){super(...arguments),this.headinglevel=2,this.expanded=!1,this.clickHandler=t=>{this.expanded=!this.expanded,this.change()},this.change=()=>{this.$emit("change")}}}var En;o([K({attribute:"heading-level",mode:"fromView",converter:U})],Bn.prototype,"headinglevel",void 0),o([K({mode:"boolean"})],Bn.prototype,"expanded",void 0),o([K],Bn.prototype,"id",void 0),Es(Bn,Ls),function(t){t.single="single",t.multi="multi"}(En||(En={}));class Hn extends qs{constructor(){super(...arguments),this.expandmode=En.multi,this.activeItemIndex=0,this.change=()=>{this.$emit("change")},this.setItems=()=>{this.accordionIds=this.getItemIds(),this.accordionItems.forEach(((t,e)=>{t instanceof Bn&&(t.addEventListener("change",this.activeItemChange),this.isSingleExpandMode()&&(this.activeItemIndex!==e?t.expanded=!1:t.expanded=!0));const i=this.accordionIds[e];t.setAttribute("id","string"!=typeof i?`accordion-${e+1}`:i),this.activeid=this.accordionIds[this.activeItemIndex],t.addEventListener("keydown",this.handleItemKeyDown),t.addEventListener("focus",this.handleItemFocus)}))},this.removeItemListeners=t=>{t.forEach(((t,e)=>{t.removeEventListener("change",this.activeItemChange),t.removeEventListener("keydown",this.handleItemKeyDown),t.removeEventListener("focus",this.handleItemFocus)}))},this.activeItemChange=t=>{const e=t.target;this.isSingleExpandMode()&&(this.resetItems(),t.target.expanded=!0),this.activeid=t.target.getAttribute("id"),this.activeItemIndex=Array.from(this.accordionItems).indexOf(e),this.change()},this.handleItemKeyDown=t=>{if(t.target!==t.currentTarget)return;const e=t.keyCode;switch(this.accordionIds=this.getItemIds(),e){case 38:t.preventDefault(),this.adjust(-1);break;case 40:t.preventDefault(),this.adjust(1);break;case 36:this.activeItemIndex=0,this.focusItem();break;case 35:this.activeItemIndex=this.accordionItems.length-1,this.focusItem()}},this.handleItemFocus=t=>{if(t.target===t.currentTarget){const e=t.target,i=this.activeItemIndex=Array.from(this.accordionItems).indexOf(e);this.activeItemIndex!==i&&-1!==i&&(this.activeItemIndex=i,this.activeid=this.accordionIds[this.activeItemIndex])}}}accordionItemsChanged(t,e){this.$fastController.isConnected&&(this.removeItemListeners(t),this.accordionIds=this.getItemIds(),this.setItems())}resetItems(){this.accordionItems.forEach(((t,e)=>{t.expanded=!1}))}getItemIds(){return this.accordionItems.map((t=>t.getAttribute("id")))}isSingleExpandMode(){return this.expandmode===En.single}adjust(t){this.activeItemIndex=Mn(0,this.accordionItems.length-1,this.activeItemIndex+t),this.focusItem()}focusItem(){const t=this.accordionItems[this.activeItemIndex];t instanceof Bn&&t.expandbutton.focus()}}o([K({attribute:"expand-mode"})],Hn.prototype,"expandmode",void 0),o([N],Hn.prototype,"accordionItems",void 0);const Rn=(t,e)=>As`
    <template>
        <slot name="item" part="item" ${Zs("accordionItems")}></slot>
    </template>
`,jn=(t,e)=>As`
    <template
        class="${t=>t.expanded?"expanded":""}"
        slot="item"
    >
        <div
            class="heading"
            part="heading"
            role="heading"
            aria-level="${t=>t.headinglevel}"
        >
            <button
                class="button"
                part="button"
                ${Ps("expandbutton")}
                aria-expanded="${t=>t.expanded}"
                aria-controls="${t=>t.id}-panel"
                id="${t=>t.id}"
                @click="${(t,e)=>t.clickHandler(e.event)}"
            >
                <span class="heading">
                    <slot name="heading" part="heading"></slot>
                </span>
            </button>
            ${Bs}
            ${Ms}
            <span class="icon" part="icon" aria-hidden="true">
                <slot name="expanded-icon" part="expanded-icon">
                    ${e.expandedIcon||""}
                </slot>
                <slot name="collapsed-icon" part="collapsed-icon">
                    ${e.collapsedIcon||""}
                </slot>
            <span>
        </div>
        <div
            class="region"
            part="region"
            id="${t=>t.id}-panel"
            role="region"
            aria-labelledby="${t=>t.id}"
        >
            <slot></slot>
        </div>
    </template>
`,zn=(t,e)=>at`
        ${nn("flex")} :host {
            box-sizing: border-box;
            flex-direction: column;
            font-family: ${pi};
            font-size: ${ki};
            line-height: ${Ii};
            color: ${Zo};
            border-top: calc(${xi} * 1px) solid ${ss};
        }
    `,_n=(Hn.compose({baseName:"accordion",template:Rn,styles:zn}),zn),qn=(t,e)=>at`
    ${nn("flex")} :host {
        box-sizing: border-box;
        font-family: ${pi};
        flex-direction: column;
        font-size: ${ki};
        line-height: ${Ii};
        border-bottom: calc(${xi} * 1px) solid ${ss};
    }
    
    .region {
        display: none;
        padding: calc((6 + (${vi} * 2 * ${mi})) * 1px);
    }

    .heading {
        display: grid;
        position: relative;
        grid-template-columns: auto 1fr auto calc(${yn} * 1px);
        z-index: 2;
    }

    .button {
        appearance: none;
        border: none;
        background: none;
        grid-column: 2;
        grid-row: 1;
        outline: none;
        padding: 0 calc((6 + (${vi} * 2 * ${mi})) * 1px);
        text-align: left;
        height: calc(${yn} * 1px);
        color: ${Zo};
        cursor: pointer;
        font-family: inherit;
    }

    .button:hover {
        color: ${Zo};
    }

    .button:active {
        color: ${Zo};
    }

    .button::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1;
        cursor: pointer;
    }

    .button:${vn}::before {
        outline: none;
        border: calc(${wi} * 1px) solid ${Uo};
        border-radius: calc(${bi} * 1px);
    }

    :host([expanded]) .region {
        display: block;
    }

    .icon {
        display: flex;
        align-items: center;
        justify-content: center;
        grid-column: 4;
        z-index: 2;
        pointer-events: none;
    }

    slot[name="expanded-icon"],
    slot[name="collapsed-icon"] {
        fill: ${go};
    }

    slot[name="collapsed-icon"] {
        display: flex;
    }

    :host([expanded]) slot[name="collapsed-icon"] {
        display: none;
    }

    slot[name="expanded-icon"] {
        display: none;
    }
    
    :host([expanded]) slot[name="expanded-icon"] {
        display: flex;
    }

    .start {
        display: flex;
        align-items: center;
        padding-inline-start: calc(${vi} * 1px);
        justify-content: center;
        grid-column: 1;
        z-index: 2;
    }

    .end {
        display: flex;
        align-items: center;
        justify-content: center;
        grid-column: 3;
        z-index: 2;
    }
`.withBehaviors(on(at`
            .button:${vn}::before {
                border-color: ${sn.Highlight};
            }
            :host slot[name="collapsed-icon"],
            :host([expanded]) slot[name="expanded-icon"] {
                fill: ${sn.ButtonText};
            }
        `)),Gn=(Bn.compose({baseName:"accordion-item",template:jn,styles:qn,collapsedIcon:'\n        <svg\n            width="20"\n            height="20"\n            viewBox="0 0 20 20"\n            xmlns="http://www.w3.org/2000/svg"\n        >\n            <path\n                fill-rule="evenodd"\n                clip-rule="evenodd"\n                d="M16.22 3H3.78a.78.78 0 00-.78.78v12.44c0 .43.35.78.78.78h12.44c.43 0 .78-.35.78-.78V3.78a.78.78 0 00-.78-.78zM3.78 2h12.44C17.2 2 18 2.8 18 3.78v12.44c0 .98-.8 1.78-1.78 1.78H3.78C2.8 18 2 17.2 2 16.22V3.78C2 2.8 2.8 2 3.78 2zM11 9h3v2h-3v3H9v-3H6V9h3V6h2v3z"\n            />\n        </svg>\n    ',expandedIcon:'\n        <svg\n            width="20"\n            height="20"\n            viewBox="0 0 20 20"\n            xmlns="http://www.w3.org/2000/svg"\n        >\n            <path\n                fill-rule="evenodd"\n                clip-rule="evenodd"\n                d="M3.78 3h12.44c.43 0 .78.35.78.78v12.44c0 .43-.35.78-.78.78H3.78a.78.78 0 01-.78-.78V3.78c0-.43.35-.78.78-.78zm12.44-1H3.78C2.8 2 2 2.8 2 3.78v12.44C2 17.2 2.8 18 3.78 18h12.44c.98 0 1.78-.8 1.78-1.78V3.78C18 2.8 17.2 2 16.22 2zM14 9H6v2h8V9z"\n            />\n        </svg>\n    '}),qn),Un=Hn.compose({baseName:"accordion",template:Rn,styles:(t,e)=>at`
        ${_n(t,e)}
    `}),Wn=Bn.compose({baseName:"accordion-item",template:jn,styles:(t,e)=>at`
        ${Gn(t,e)}
    `}),Kn=Ys.compose({baseName:"button",template:Js,styles:(t,e)=>at`
        ${Fn(t,e)}
    `});class Yn extends qs{}const Qn=(t,e)=>As`
    <slot></slot>
`,Xn="box-shadow: 0 0 calc((var(--elevation) * 0.225px) + 2px) rgba(0, 0, 0, calc(.11 * (2 - var(--background-luminance, 1)))), 0 calc(var(--elevation) * 0.4px) calc((var(--elevation) * 0.9px)) rgba(0, 0, 0, calc(.13 * (2 - var(--background-luminance, 1))));",Zn=(t,e)=>at`
        ${nn("block")} :host {
            --elevation: 4;
            display: block;
            contain: content;
            height: var(--card-height, 100%);
            width: var(--card-width, 100%);
            box-sizing: border-box;
            background: ${uo};
            border-radius: calc(${bi} * 1px);
            ${Xn}
        }
    `.withBehaviors(on(at`
                :host {
                    forced-color-adjust: none;
                    background: ${sn.Canvas};
                    box-shadow: 0 0 0 1px ${sn.CanvasText};
                }
            `));(class extends Yn{connectedCallback(){super.connectedCallback();const t=nt(this);t&&uo.setValueFor(this,(e=>qo.getValueFor(e).evaluate(e,uo.getValueFor(t))))}}).compose({baseName:"card",template:Qn,styles:Zn});const Jn=Zn,tr=Yn.compose({baseName:"card",template:Qn,styles:Jn});class er extends qs{constructor(){super(...arguments),this.appearance="",this.count=0}increment(){this.count++}}o([K],er.prototype,"appearance",void 0),o([K],er.prototype,"count",void 0);const ir=er.compose({baseName:"counter",template:(t,e)=>{const i=t.tagFor(Vn);return As`
        <${i} appearance="${t=>t.appearance}" @click=${t=>t.increment()}>
            <slot>
                This button has been clicked ${t=>t.count} times.
            </slot>
        </${i}>
    `},styles:(t,e)=>{return at`
        ${i=t,o=e,at`
        ${i.tagFor(Vn)} {
            ${Fn(i,o)}
        }
    `}
    `;var i,o}});class or extends qs{}class sr extends(_s(or)){constructor(){super(...arguments),this.proxy=document.createElement("input")}}class nr extends sr{constructor(){super(),this.initialValue="on",this.indeterminate=!1,this.dirtyChecked=!1,this.constructed=!1,this.formResetCallback=()=>{this.checked=this.checkedAttribute,this.dirtyChecked=!1},this.keypressHandler=t=>{switch(t.keyCode){case 32:this.checked=!this.checked}},this.clickHandler=t=>{this.disabled||this.readOnly||(this.checked=!this.checked)},this.defaultChecked=!!this.checkedAttribute,this.checked=this.defaultChecked,this.constructed=!0}readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly)}checkedAttributeChanged(){this.defaultChecked=this.checkedAttribute}defaultCheckedChanged(){this.dirtyChecked||(this.checked=this.defaultChecked,this.dirtyChecked=!1)}checkedChanged(){this.dirtyChecked||(this.dirtyChecked=!0),this.updateForm(),this.proxy instanceof HTMLInputElement&&(this.proxy.checked=this.checked),this.constructed&&this.$emit("change"),this.validate()}connectedCallback(){super.connectedCallback(),this.proxy.setAttribute("type","checkbox"),this.updateForm()}updateForm(){const t=this.checked?this.value:null;this.setFormValue(t,t)}}o([K({attribute:"readonly",mode:"boolean"})],nr.prototype,"readOnly",void 0),o([K({attribute:"checked",mode:"boolean"})],nr.prototype,"checkedAttribute",void 0),o([N],nr.prototype,"defaultSlottedNodes",void 0),o([N],nr.prototype,"defaultChecked",void 0),o([N],nr.prototype,"checked",void 0),o([N],nr.prototype,"indeterminate",void 0);const rr=(t,e)=>As`
    <template
        role="checkbox"
        aria-checked="${t=>t.checked}"
        aria-required="${t=>t.required}"
        aria-disabled="${t=>t.disabled}"
        aria-readonly="${t=>t.readOnly}"
        tabindex="${t=>t.disabled?null:0}"
        @keypress="${(t,e)=>t.keypressHandler(e.event)}"
        @click="${(t,e)=>t.clickHandler(e.event)}"
        class="${t=>t.readOnly?"readonly":""} ${t=>t.checked?"checked":""} ${t=>t.indeterminate?"indeterminate":""}"
    >
        <div part="control" class="control">
            <slot name="checked-indicator">
                ${e.checkedIndicator||""}
            </slot>
            <slot name="indeterminate-indicator">
                ${e.indeterminateIndicator||""}
            </slot>
        </div>
        <label
            part="label"
            class="${t=>t.defaultSlottedNodes&&t.defaultSlottedNodes.length?"label":"label label__hidden"}"
        >
            <slot ${Zs("defaultSlottedNodes")}></slot>
        </label>
    </template>
`,ar=(t,e)=>at`
    ${nn("inline-flex")} :host {
        align-items: center;
        outline: none;
        margin: calc(${vi} * 1px) 0;
        /* Chromium likes to select label text or the default slot when the checkbox is
            clicked. Maybe there is a better solution here? */
        user-select: none;
    }

    .control {
        position: relative;
        width: calc((${yn} / 2 + ${vi}) * 1px);
        height: calc((${yn} / 2 + ${vi}) * 1px);
        box-sizing: border-box;
        border-radius: calc(${bi} * 1px);
        border: calc(${xi} * 1px) solid ${ts};
        background: ${Mo};
        outline: none;
        cursor: pointer;
    }

    .label {
        font-family: ${pi};
        color: ${Zo};
        /* Need to discuss with Brian how HorizontalSpacingNumber can work.
            https://github.com/microsoft/fast/issues/2766 */
        padding-inline-start: calc(${vi} * 2px + 2px);
        margin-inline-end: calc(${vi} * 2px + 2px);
        cursor: pointer;
        font-size: ${$i};
        line-height: ${Ci};
    }

    .label__hidden {
        display: none;
        visibility: hidden;
    }

    .checked-indicator {
        width: 100%;
        height: 100%;
        display: block;
        fill: ${wo};
        opacity: 0;
        pointer-events: none;
    }

    .indeterminate-indicator {
        border-radius: calc(${bi} * 1px);
        background: ${wo};
        position: absolute;
        top: 50%;
        left: 50%;
        width: 50%;
        height: 50%;
        transform: translate(-50%, -50%);
        opacity: 0;
    }

    :host(:not([disabled])) .control:hover {
        background: ${Bo};
        border-color: ${es};
    }

    :host(:not([disabled])) .control:active {
        background: ${Eo};
        border-color: ${is};
    }

    :host(:${vn}) .control {
        box-shadow: 0 0 0 2px ${uo}, 0 0 0 4px ${Uo};
    }

    :host([aria-checked="true"]) .control {
        background: ${go};
        border: calc(${xi} * 1px) solid ${go};
    }

    :host([aria-checked="true"]:not([disabled])) .control:hover {
        background: ${bo};
        border: calc(${xi} * 1px) solid ${bo};
    }

    :host([aria-checked="true"]:not([disabled])) .control:hover .checked-indicator {
        fill: ${$o};
    }

    :host([aria-checked="true"]:not([disabled])) .control:hover .indeterminate-indicator {
        background: ${$o};
    }

    :host([aria-checked="true"]:not([disabled])) .control:active {
        background: ${mo};
        border: calc(${xi} * 1px) solid ${mo};
    }

    :host([aria-checked="true"]:not([disabled])) .control:active .checked-indicator {
        fill: ${Co};
    }

    :host([aria-checked="true"]:not([disabled])) .control:active .indeterminate-indicator {
        background: ${Co};
    }

    :host([aria-checked="true"]:${vn}:not([disabled])) .control {
        box-shadow: 0 0 0 2px ${uo}, 0 0 0 4px ${Uo};
    }


    :host([disabled]) .label,
    :host([readonly]) .label,
    :host([readonly]) .control,
    :host([disabled]) .control {
        cursor: ${tn};
    }

    :host([aria-checked="true"]:not(.indeterminate)) .checked-indicator,
    :host(.indeterminate) .indeterminate-indicator {
        opacity: 1;
    }

    :host([disabled]) {
        opacity: ${yi};
    }
`.withBehaviors(on(at`
            .control {
                forced-color-adjust: none;
                border-color: ${sn.FieldText};
                background: ${sn.Field};
            }
            .checked-indicator {
                fill: ${sn.FieldText};
            }
            .indeterminate-indicator {
                background: ${sn.FieldText};
            }
            :host(:not([disabled])) .control:hover, .control:active {
                border-color: ${sn.Highlight};
                background: ${sn.Field};
            }
            :host(:${vn}) .control {
                box-shadow: 0 0 0 2px ${sn.Field}, 0 0 0 4px ${sn.FieldText};
            }
            :host([aria-checked="true"]:${vn}:not([disabled])) .control {
                box-shadow: 0 0 0 2px ${sn.Field}, 0 0 0 4px ${sn.FieldText};
            }
            :host([aria-checked="true"]) .control {
                background: ${sn.Highlight};
                border-color: ${sn.Highlight};
            }
            :host([aria-checked="true"]:not([disabled])) .control:hover, .control:active {
                border-color: ${sn.Highlight};
                background: ${sn.HighlightText};
            }
            :host([aria-checked="true"]) .checked-indicator {
                fill: ${sn.HighlightText};
            }
            :host([aria-checked="true"]:not([disabled])) .control:hover .checked-indicator {
                fill: ${sn.Highlight}
            }
            :host([aria-checked="true"]) .indeterminate-indicator {
                background: ${sn.HighlightText};
            }
            :host([aria-checked="true"]) .control:hover .indeterminate-indicator {
                background: ${sn.Highlight}
            }
            :host([disabled]) {
                opacity: 1;
            }
            :host([disabled]) .control {
                forced-color-adjust: none;
                border-color: ${sn.GrayText};
                background: ${sn.Field};
            }
            :host([disabled]) .indeterminate-indicator,
            :host([aria-checked="true"][disabled]) .control:hover .indeterminate-indicator {
                forced-color-adjust: none;
                background: ${sn.GrayText};
            }
            :host([disabled]) .checked-indicator,
            :host([aria-checked="true"][disabled]) .control:hover .checked-indicator {
                forced-color-adjust: none;
                fill: ${sn.GrayText};
            }
        `)),lr=(nr.compose({baseName:"checkbox",template:rr,styles:ar,checkedIndicator:'\n        <svg\n            part="checked-indicator"\n            class="checked-indicator"\n            viewBox="0 0 20 20"\n            xmlns="http://www.w3.org/2000/svg"\n        >\n            <path\n                fill-rule="evenodd"\n                clip-rule="evenodd"\n                d="M8.143 12.6697L15.235 4.5L16.8 5.90363L8.23812 15.7667L3.80005 11.2556L5.27591 9.7555L8.143 12.6697Z"\n            />\n        </svg>\n    ',indeterminateIndicator:'\n        <div part="indeterminate-indicator" class="indeterminate-indicator"></div>\n    '}),ar),cr=nr.compose({baseName:"checkbox",template:rr,styles:(t,e)=>at`
        ${lr(t,e)}
    `}),hr=Array.isArray;var dr=ln?ln.prototype:void 0,ur=dr?dr.toString:void 0;const pr=function t(e){if("string"==typeof e)return e;if(hr(e))return function(t,e){for(var i=-1,o=null==t?0:t.length,s=Array(o);++i<o;)s[i]=e(t[i],i,t);return s}(e,t)+"";if(function(t){return"symbol"==typeof t||bn(t)&&"[object Symbol]"==gn(t)}(e))return ur?ur.call(e):"";var i=e+"";return"0"==i&&1/e==-1/0?"-0":i};var fr=0;const gr=function(t){var e,i=++fr;return(null==(e=t)?"":pr(e))+i};var br,mr,vr,yr;function xr(t){return function(...t){return t.every((t=>t instanceof HTMLElement))}(t)&&("option"===t.getAttribute("role")||t instanceof HTMLOptionElement)}!function(t){t.above="above",t.below="below"}(br||(br={})),function(t){t.combobox="combobox"}(mr||(mr={}));class wr extends qs{constructor(t,e,i,o){super(),this.defaultSelected=!1,this.dirtySelected=!1,this.selected=this.defaultSelected,this.dirtyValue=!1,this.initialValue=this.initialValue||"",t&&(this.textContent=t),e&&(this.initialValue=e),i&&(this.defaultSelected=i),o&&(this.selected=o),this.proxy=new Option(`${this.textContent}`,this.initialValue,this.defaultSelected,this.selected),this.proxy.disabled=this.disabled}defaultSelectedChanged(){this.dirtySelected||(this.selected=this.defaultSelected,this.proxy instanceof HTMLOptionElement&&(this.proxy.selected=this.defaultSelected))}disabledChanged(t,e){this.proxy instanceof HTMLOptionElement&&(this.proxy.disabled=this.disabled)}selectedAttributeChanged(){this.defaultSelected=this.selectedAttribute,this.proxy instanceof HTMLOptionElement&&(this.proxy.defaultSelected=this.defaultSelected)}selectedChanged(){this.$fastController.isConnected&&(this.dirtySelected||(this.dirtySelected=!0),this.proxy instanceof HTMLOptionElement&&(this.proxy.selected=this.selected))}initialValueChanged(t,e){this.dirtyValue||(this.value=this.initialValue,this.dirtyValue=!1)}get label(){return this.value?this.value:this.textContent?this.textContent:""}get text(){return this.textContent}set value(t){this._value=t,this.dirtyValue=!0,this.proxy instanceof HTMLElement&&(this.proxy.value=t),F.notify(this,"value")}get value(){return F.track(this,"value"),this._value?this._value:this.text}get form(){return this.proxy?this.proxy.form:null}}o([N],wr.prototype,"defaultSelected",void 0),o([K({mode:"boolean"})],wr.prototype,"disabled",void 0),o([K({attribute:"selected",mode:"boolean"})],wr.prototype,"selectedAttribute",void 0),o([N],wr.prototype,"selected",void 0),o([K({attribute:"value",mode:"fromView"})],wr.prototype,"initialValue",void 0),Es(wr,Ls),function(t){t.listbox="listbox"}(vr||(vr={}));class $r extends qs{constructor(){super(...arguments),this.selectedIndex=-1,this.typeaheadBuffer="",this.typeaheadTimeout=-1,this.typeAheadExpired=!0,this.role=vr.listbox,this._options=[],this.selectedOptions=[],this.shouldSkipFocus=!1,this.handleTypeAhead=t=>{this.typeaheadTimeout&&window.clearTimeout(this.typeaheadTimeout),this.typeaheadTimeout=window.setTimeout((()=>this.typeAheadExpired=!0),$r.TYPE_AHEAD_TIMEOUT_MS),t.length>1||(this.typeaheadBuffer=`${this.typeAheadExpired?"":this.typeaheadBuffer}${t}`)}}selectedIndexChanged(t,e){this.setSelectedOptions()}typeaheadBufferChanged(t,e){if(this.$fastController.isConnected){const t=this.typeaheadBuffer.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&"),e=new RegExp(`^${t}`,"gi"),i=this.options.filter((t=>t.text.trim().match(e)));if(i.length){const t=this.options.indexOf(i[0]);t>-1&&(this.selectedIndex=t)}this.typeAheadExpired=!1}}slottedOptionsChanged(t,e){this.$fastController.isConnected&&(this.options=e.reduce(((t,e)=>(xr(e)&&t.push(e),t)),[]),this.options.forEach((t=>{t.id=t.id||gr("option-")})),this.setSelectedOptions(),this.setDefaultSelectedOption())}get options(){return F.track(this,"options"),this._options}set options(t){this._options=t,F.notify(this,"options")}selectedOptionsChanged(t,e){this.$fastController.isConnected&&this.options.forEach((t=>{t.selected=e.includes(t)}))}get firstSelectedOption(){return this.selectedOptions[0]}focusAndScrollOptionIntoView(){this.contains(document.activeElement)&&this.firstSelectedOption&&(this.firstSelectedOption.focus(),requestAnimationFrame((()=>{this.firstSelectedOption.scrollIntoView({block:"nearest"})})))}focusinHandler(t){this.shouldSkipFocus||t.target!==t.currentTarget||(this.setSelectedOptions(),this.focusAndScrollOptionIntoView()),this.shouldSkipFocus=!1}mousedownHandler(t){return this.shouldSkipFocus=!this.contains(document.activeElement),!0}setDefaultSelectedOption(){if(this.options&&this.$fastController.isConnected){const t=this.options.findIndex((t=>null!==t.getAttribute("selected")));if(-1!==t)return void(this.selectedIndex=t);this.selectedIndex=0}}setSelectedOptions(){if(this.$fastController.isConnected&&this.options){const t=this.options[this.selectedIndex]||null;this.selectedOptions=this.options.filter((e=>e.isSameNode(t))),this.ariaActiveDescendant=this.firstSelectedOption?this.firstSelectedOption.id:"",this.focusAndScrollOptionIntoView()}}selectFirstOption(){this.disabled||(this.selectedIndex=0)}selectLastOption(){this.disabled||(this.selectedIndex=this.options.length-1)}selectNextOption(){!this.disabled&&this.options&&this.selectedIndex<this.options.length-1&&(this.selectedIndex+=1)}get length(){return this.options?this.options.length:0}selectPreviousOption(){!this.disabled&&this.selectedIndex>0&&(this.selectedIndex=this.selectedIndex-1)}clickHandler(t){const e=t.target.closest("option,[role=option]");if(e&&!e.disabled)return this.selectedIndex=this.options.indexOf(e),!0}keydownHandler(t){if(this.disabled)return!0;this.shouldSkipFocus=!1;const e=t.key;switch(e){case"Home":t.shiftKey||(t.preventDefault(),this.selectFirstOption());break;case"ArrowDown":t.shiftKey||(t.preventDefault(),this.selectNextOption());break;case"ArrowUp":t.shiftKey||(t.preventDefault(),this.selectPreviousOption());break;case"End":t.preventDefault(),this.selectLastOption();break;case"Tab":return this.focusAndScrollOptionIntoView(),!0;case"Enter":case"Escape":return!0;case" ":if(this.typeAheadExpired)return!0;default:return 1===e.length&&this.handleTypeAhead(`${e}`),!0}}}$r.TYPE_AHEAD_TIMEOUT_MS=1e3,$r.slottedOptionFilter=t=>xr(t)&&!t.disabled&&!t.hidden,o([N],$r.prototype,"selectedIndex",void 0),o([N],$r.prototype,"typeaheadBuffer",void 0),o([K],$r.prototype,"role",void 0),o([K({mode:"boolean"})],$r.prototype,"disabled",void 0),o([N],$r.prototype,"slottedOptions",void 0),o([N],$r.prototype,"selectedOptions",void 0);class Cr{constructor(){this.ariaActiveDescendant=""}}o([N],Cr.prototype,"ariaActiveDescendant",void 0),o([N],Cr.prototype,"ariaDisabled",void 0),o([N],Cr.prototype,"ariaExpanded",void 0),Es(Cr,ns),Es($r,Cr);class kr extends $r{}class Ir extends(_s(kr)){constructor(){super(...arguments),this.proxy=document.createElement("input")}}!function(t){t.inline="inline",t.list="list",t.both="both",t.none="none"}(yr||(yr={}));class Tr extends Ir{constructor(){super(...arguments),this._value="",this.filteredOptions=[],this.filter="",this.forcedPosition=!1,this.formResetCallback=()=>{this.value=this.initialValue,this.dirtyValue=!1,this.setDefaultSelectedOption(),this.updateValue()},this.listboxId=gr("listbox-"),this.maxHeight=0,this.open=!1,this.position=br.below,this.role=mr.combobox}get isAutocompleteInline(){return this.autocomplete===yr.inline||this.isAutocompleteBoth}get isAutocompleteList(){return this.autocomplete===yr.list||this.isAutocompleteBoth}get isAutocompleteBoth(){return this.autocomplete===yr.both}openChanged(){this.ariaExpanded=this.open?"true":"false",this.open&&(this.setPositioning(),this.focusAndScrollOptionIntoView())}get options(){return F.track(this,"options"),this.filteredOptions.length?this.filteredOptions:this._options}set options(t){this._options=t,F.notify(this,"options")}placeholderChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.placeholder=this.placeholder)}get value(){return F.track(this,"value"),this._value}set value(t){var e,i,o;const s=`${this._value}`;if(this.$fastController.isConnected&&this.options){const s=this.options.findIndex((e=>e.text.toLowerCase()===t.toLowerCase())),n=null===(e=this.options[this.selectedIndex])||void 0===e?void 0:e.text,r=null===(i=this.options[s])||void 0===i?void 0:i.text;this.selectedIndex=n!==r?s:this.selectedIndex,t=(null===(o=this.firstSelectedOption)||void 0===o?void 0:o.text)||t}s!==t&&(this._value=t,super.valueChanged(s,t),F.notify(this,"value"))}clickHandler(t){if(!this.disabled){if(this.open){const e=t.target.closest("option,[role=option]");if(!e||e.disabled)return;this.selectedOptions=[e],this.control.value=e.text}return this.open=!this.open,this.open||this.updateValue(!0),!0}}connectedCallback(){super.connectedCallback(),this.forcedPosition=!!this.positionAttribute,this.value&&(this.initialValue=this.value)}disabledChanged(t,e){super.disabledChanged&&super.disabledChanged(t,e),this.ariaDisabled=this.disabled?"true":"false"}filterOptions(){this.autocomplete&&this.autocomplete!==yr.none||(this.filter="");const t=this.filter.toLowerCase();this.filteredOptions=this._options.filter((t=>t.text.toLowerCase().startsWith(this.filter.toLowerCase()))),this.isAutocompleteList&&(this.filteredOptions.length||t||(this.filteredOptions=this._options),this._options.forEach((t=>{t.hidden=!this.filteredOptions.includes(t)})))}focusoutHandler(t){if(this.updateValue(),!this.open)return!0;const e=t.relatedTarget;this.isSameNode(e)?this.focus():this.options&&this.options.includes(e)||(this.open=!1)}inputHandler(t){if(this.filter=this.control.value,this.filterOptions(),"deleteContentBackward"===t.inputType||!this.filter.length)return!0;this.isAutocompleteList&&!this.open&&(this.open=!0),this.isAutocompleteInline&&this.filteredOptions.length&&(this.selectedOptions=[this.filteredOptions[0]],this.selectedIndex=this.options.indexOf(this.firstSelectedOption),this.setInlineSelection())}keydownHandler(t){const e=t.key;if(t.ctrlKey||t.shiftKey)return!0;switch(e){case"Enter":{this.updateValue(!0),this.isAutocompleteInline&&(this.filter=this.value),this.open=!1;const t=this.control.value.length;this.control.setSelectionRange(t,t);break}case"Escape":if(this.isAutocompleteInline||(this.selectedIndex=-1),this.open){this.open=!1;break}this.value="",this.control.value="",this.filter="",this.filterOptions();break;case"Tab":if(this.updateValue(),!this.open)return!0;t.preventDefault(),this.open=!1;break;case"ArrowUp":case"ArrowDown":if(this.filterOptions(),!this.open){this.open=!0;break}this.filteredOptions.length>0&&super.keydownHandler(t),this.isAutocompleteInline&&(this.updateValue(),this.setInlineSelection());break;default:return!0}}keyupHandler(t){switch(t.key){case"ArrowLeft":case"ArrowRight":case"Backspace":case"Delete":case"Home":case"End":this.filter=this.control.value,this.selectedIndex=-1,this.filterOptions()}}selectedIndexChanged(t,e){if(this.$fastController.isConnected){if(-1,i=this.options.length-1,o=e,(e=Math.min(Math.max(o,-1),i))!==this.selectedIndex)return void(this.selectedIndex=e);super.selectedIndexChanged(t,e)}var i,o}selectPreviousOption(){!this.disabled&&this.selectedIndex>=0&&(this.selectedIndex=this.selectedIndex-1)}setDefaultSelectedOption(){if(this.$fastController.isConnected&&this.options){const t=this.options.findIndex((t=>null!==t.getAttribute("selected")||t.selected));this.selectedIndex=t,!this.dirtyValue&&this.firstSelectedOption&&(this.value=this.firstSelectedOption.text),this.setSelectedOptions()}}setInlineSelection(){this.firstSelectedOption&&(this.control.value=this.firstSelectedOption.text,this.control.focus(),this.control.setSelectionRange(this.filter.length,this.control.value.length,"backward"))}setPositioning(){const t=this.getBoundingClientRect(),e=window.innerHeight-t.bottom;this.position=this.forcedPosition?this.positionAttribute:t.top>e?br.above:br.below,this.positionAttribute=this.forcedPosition?this.positionAttribute:this.position,this.maxHeight=this.position===br.above?~~t.top:~~e}selectedOptionsChanged(t,e){this.$fastController.isConnected&&this._options.forEach((t=>{t.selected=e.includes(t)}))}slottedOptionsChanged(t,e){super.slottedOptionsChanged(t,e),this.updateValue()}updateValue(t){var e;this.$fastController.isConnected&&(this.value=(null===(e=this.firstSelectedOption)||void 0===e?void 0:e.text)||this.control.value),t&&this.$emit("change")}}o([K({attribute:"autocomplete",mode:"fromView"})],Tr.prototype,"autocomplete",void 0),o([N],Tr.prototype,"maxHeight",void 0),o([K({attribute:"open",mode:"boolean"})],Tr.prototype,"open",void 0),o([K],Tr.prototype,"placeholder",void 0),o([K({attribute:"position"})],Tr.prototype,"positionAttribute",void 0),o([N],Tr.prototype,"position",void 0);class Sr{}o([K({attribute:"aria-autocomplete",mode:"fromView"})],Sr.prototype,"ariaAutocomplete",void 0),Es(Sr,ns),Es(Tr,Ls,Sr);const Vr=(t,e)=>As`
    <template
        autocomplete="${t=>t.autocomplete}"
        class="${t=>t.disabled?"disabled":""} ${t=>t.position}"
        tabindex="${t=>t.disabled?null:"0"}"
        aria-disabled="${t=>t.ariaDisabled}"
        aria-autocomplete="${t=>t.autocomplete}"
        @click="${(t,e)=>t.clickHandler(e.event)}"
        @focusout="${(t,e)=>t.focusoutHandler(e.event)}"
    >
        <div class="control" part="control">
            ${Bs}
            <slot name="control">
                <input
                    class="selected-value"
                    part="selected-value"
                    placeholder="${t=>t.placeholder}"
                    role="${t=>t.role}"
                    type="text"
                    aria-activedescendant="${t=>t.open?t.ariaActiveDescendant:null}"
                    aria-controls="${t=>t.listboxId}"
                    aria-expanded="${t=>t.ariaExpanded}"
                    aria-haspopup="listbox"
                    ?disabled="${t=>t.disabled}"
                    :value="${t=>t.value}"
                    @input="${(t,e)=>t.inputHandler(e.event)}"
                    @keydown="${(t,e)=>t.keydownHandler(e.event)}"
                    @keyup="${(t,e)=>t.keyupHandler(e.event)}"
                    ${Ps("control")}
                />
                <div class="indicator" part="indicator" aria-hidden="true">
                    <slot name="indicator">
                        ${e.indicator||""}
                    </slot>
                </div>
            </slot>
            ${Ms}
        </div>
        <div
            aria-disabled="${t=>t.disabled}"
            class="listbox"
            id="${t=>t.listboxId}"
            part="listbox"
            role="listbox"
            style="--max-height: ${t=>t.maxHeight}px"
            ?disabled="${t=>t.disabled}"
            ?hidden="${t=>!t.open}"
        >
            <slot
                ${Zs({filter:$r.slottedOptionFilter,flatten:!0,property:"slottedOptions"})}
            ></slot>
        </div>
    </template>
`,Or=(t,e)=>at`
    ${at`
    ${nn("inline-flex")} :host {
        --elevation: 14;
        background: ${Mo};
        border-radius: calc(${bi} * 1px);
        border: calc(${xi} * 1px) solid ${go};
        box-sizing: border-box;
        color: ${Zo};
        font-family: ${pi};
        height: calc(${yn} * 1px);
        position: relative;
        user-select: none;
        min-width: 250px;
        outline: none;
        vertical-align: top;
    }

    .listbox {
        ${Xn}
        background: ${no};
        border: calc(${xi} * 1px) solid ${ts};
        border-radius: calc(${bi} * 1px);
        box-sizing: border-box;
        display: inline-flex;
        flex-direction: column;
        left: 0;
        max-height: calc(var(--max-height) - (${yn} * 1px));
        padding: calc(${vi} * 1px) 0;
        overflow-y: auto;
        position: absolute;
        width: 100%;
        z-index: 1;
    }

    .listbox[hidden] {
        display: none;
    }

    .control {
        align-items: center;
        box-sizing: border-box;
        cursor: pointer;
        display: flex;
        font-size: ${$i};
        font-family: inherit;
        line-height: ${Ci};
        min-height: 100%;
        padding: 0 calc(${vi} * 2.25px);
        width: 100%;
    }

    :host(:not([disabled]):hover) {
        background: ${Bo};
        border-color: ${bo};
    }

    :host(:${vn}) {
        border-color: ${Uo};
        box-shadow: 0 0 0 calc(${wi} * 1px) ${Uo};
    }

    :host(:${vn}) ::slotted([aria-selected="true"][role="option"]:not([disabled])) {
        box-shadow: 0 0 0 calc(${wi} * 1px) inset ${Ko};
        border-color: ${Uo};
        background: ${vo};
        color: ${ko};
    }

    :host([disabled]) {
        cursor: ${tn};
        opacity: ${yi};
    }

    :host([disabled]) .control {
        cursor: ${tn};
        user-select: none;
    }

    :host([disabled]:hover) {
        background: ${Ro};
        color: ${Zo};
        fill: currentcolor;
    }

    :host(:not([disabled])) .control:active {
        background: ${Eo};
        border-color: ${mo};
        border-radius: calc(${bi} * 1px);
    }

    :host([open][position="above"]) .listbox {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
    }

    :host([open][position="below"]) .listbox {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }

    :host([open][position="above"]) .listbox {
        border-bottom: 0;
        bottom: calc(${yn} * 1px);
    }

    :host([open][position="below"]) .listbox {
        border-top: 0;
        top: calc(${yn} * 1px);
    }

    .selected-value {
        flex: 1 1 auto;
        font-family: inherit;
        text-align: start;
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    .indicator {
        flex: 0 0 auto;
        margin-inline-start: 1em;
    }

    slot[name="listbox"] {
        display: none;
        width: 100%;
    }

    :host([open]) slot[name="listbox"] {
        display: flex;
        position: absolute;
        ${Xn}
    }

    .end {
        margin-inline-start: auto;
    }

    .start,
    .end,
    .indicator,
    .select-indicator,
    ::slotted(svg) {
        /* TODO: adaptive typography https://github.com/microsoft/fast/issues/2432 */
        fill: currentcolor;
        height: 1em;
        min-height: calc(${vi} * 4px);
        min-width: calc(${vi} * 4px);
        width: 1em;
    }

    ::slotted([role="option"]),
    ::slotted(option) {
        flex: 0 0 auto;
    }

`.withBehaviors(on(at`
            :host(:not([disabled]):hover),
            :host(:not([disabled]):active) {
                border-color: ${sn.Highlight};
            }

            :host(:not([disabled]):${vn}) {
                background-color: ${sn.ButtonFace};
                box-shadow: 0 0 0 calc(${wi} * 1px) ${sn.Highlight};
                color: ${sn.ButtonText};
                fill: currentcolor;
                forced-color-adjust: none;
            }

            :host(:not([disabled]):${vn}) .listbox {
                background: ${sn.ButtonFace};
            }

            :host([disabled]) {
                border-color: ${sn.GrayText};
                background-color: ${sn.ButtonFace};
                color: ${sn.GrayText};
                fill: currentcolor;
                opacity: 1;
                forced-color-adjust: none;
            }

            :host([disabled]:hover) {
                background: ${sn.ButtonFace};
            }

            :host([disabled]) .control {
                color: ${sn.GrayText};
                border-color: ${sn.GrayText};
            }

            :host([disabled]) .control .select-indicator {
                fill: ${sn.GrayText};
            }

            :host(:${vn}) ::slotted([aria-selected="true"][role="option"]),
            :host(:${vn}) ::slotted(option[aria-selected="true"]),
            :host(:${vn}) ::slotted([aria-selected="true"][role="option"]:not([disabled])) {
                background: ${sn.Highlight};
                border-color: ${sn.ButtonText};
                box-shadow: 0 0 0 calc(${wi} * 1px) inset ${sn.HighlightText};
                color: ${sn.HighlightText};
                fill: currentcolor;
            }

            .start,
            .end,
            .indicator,
            .select-indicator,
            ::slotted(svg) {
                color: ${sn.ButtonText};
                fill: currentcolor;
            }
        `))}

    :host(:empty) .listbox {
        display: none;
    }

    :host([disabled]) *,
    :host([disabled]) {
        cursor: ${tn};
        user-select: none;
    }

    .selected-value {
        -webkit-appearance: none;
        background: transparent;
        border: none;
        color: inherit;
        font-size: ${$i};
        line-height: ${Ci};
        height: calc(100% - (${xi} * 1px));
        margin: auto 0;
        width: 100%;
    }

    .selected-value:hover,
    .selected-value:${vn},
    .selected-value:disabled,
    .selected-value:active {
        outline: none;
    }
`,Fr=(Tr.compose({baseName:"combobox",template:Vr,styles:Or,shadowOptions:{delegatesFocus:!0},indicator:'\n        <svg\n            class="select-indicator"\n            part="select-indicator"\n            viewBox="0 0 12 7"\n            xmlns="http://www.w3.org/2000/svg"\n        >\n            <path\n                d="M11.85.65c.2.2.2.5 0 .7L6.4 6.84a.55.55 0 01-.78 0L.14 1.35a.5.5 0 11.71-.7L6 5.8 11.15.65c.2-.2.5-.2.7 0z"\n            />\n        </svg>\n    '}),Or),Dr=Tr.compose({baseName:"combobox",template:Vr,styles:(t,e)=>at`
        ${Fr(t,e)}
    `});class Ar extends qs{connectedCallback(){super.connectedCallback(),this.setup()}disconnectedCallback(){super.disconnectedCallback(),this.details.removeEventListener("toggle",this.onToggle)}show(){this.details.open=!0}hide(){this.details.open=!1}toggle(){this.details.open=!this.details.open}setup(){this.onToggle=this.onToggle.bind(this),this.details.addEventListener("toggle",this.onToggle),this.expanded&&this.show()}onToggle(){this.expanded=this.details.open,this.$emit("toggle")}}o([K({mode:"boolean"})],Ar.prototype,"expanded",void 0),o([K],Ar.prototype,"title",void 0);const Nr=(t,e)=>As`
    <details class="disclosure" ${Ps("details")}>
        <summary
            class="invoker"
            role="button"
            aria-controls="disclosure-content"
            aria-expanded="${t=>t.expanded}"
        >
            <slot name="start"></slot>
            <slot name="title">${t=>t.title}</slot>
            <slot name="end"></slot>
        </summary>
        <div id="disclosure-content"><slot></slot></div>
    </details>
`,Pr=(t,e)=>at`
    .disclosure {
        transition: height 0.35s;
    }

    .disclosure .invoker::-webkit-details-marker {
        display: none;
    }

    .disclosure .invoker {
        list-style-type: none;
    }

    :host([appearance="accent"]) .invoker {
        background: ${go};
        color: ${wo};
        font-family: ${pi};
        font-size: ${$i};
        border-radius: calc(${bi} * 1px);
        outline: none;
        cursor: pointer;
        margin: 16px 0;
        padding: 12px;
        max-width: max-content;
    }

    :host([appearance="accent"]) .invoker:active {
        background: ${mo};
        color: ${Co};
    }

    :host([appearance="accent"]) .invoker:hover {
        background: ${bo};
        color: ${$o};
    }

    :host([appearance="lightweight"]) .invoker {
        background: transparent;
        color: ${Vo};
        border-bottom: calc(${xi} * 1px) solid ${Vo};
        cursor: pointer;
        width: max-content;
        margin: 16px 0;
    }

    :host([appearance="lightweight"]) .invoker:active {
        border-bottom-color: ${Fo};
    }

    :host([appearance="lightweight"]) .invoker:hover {
        border-bottom-color: ${Oo};
    }

    .disclosure[open] .invoker ~ * {
        animation: fadeIn 0.5s ease-in-out;
    }

    @keyframes fadeIn {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
`;class Lr extends Ar{appearanceChanged(t,e){t!==e&&(this.classList.add(e),this.classList.remove(t))}onToggle(){super.onToggle(),this.details.style.setProperty("height",`${this.disclosureHeight}px`)}setup(){super.setup(),this.appearance||(this.appearance="accent");const t=()=>this.details.getBoundingClientRect().height;this.show(),this.totalHeight=t(),this.hide(),this.height=t(),this.expanded&&this.show()}get disclosureHeight(){return this.expanded?this.totalHeight:this.height}}o([K],Lr.prototype,"appearance",void 0);const Mr=Pr,Br=(Lr.compose({baseName:"disclosure",template:Nr,styles:Pr}),Ar.compose({baseName:"disclosure",template:Nr,styles:(t,e)=>at`
        ${Mr(t,e)}
    `})),Er=(t,e)=>As`
    <template
        aria-selected="${t=>t.selected}"
        class="${t=>t.selected?"selected":""} ${t=>t.disabled?"disabled":""}"
        role="option"
    >
        ${Bs}
        <span class="content" part="content">
            <slot></slot>
        </span>
        ${Ms}
    </template>
`,Hr=(t,e)=>at`
    ${nn("inline-flex")} :host {
        align-items: center;
        font-family: ${pi};
        border-radius: calc(${bi} * 1px);
        border: calc(${wi} * 1px) solid transparent;
        box-sizing: border-box;
        color: ${Zo};
        cursor: pointer;
        fill: currentcolor;
        font-size: ${$i};
        height: calc(${yn} * 1px);
        line-height: ${Ci};
        margin: 0 calc(${vi} * 1px);
        outline: none;
        overflow: hidden;
        padding: 0 calc(${vi} * 2.25px);
        user-select: none;
        white-space: nowrap;
    }

    :host(:${vn}) {
        box-shadow: 0 0 0 calc(${wi} * 1px) inset ${Ko};
        border-color: ${Uo};
        background: ${vo};
        color: ${ko};
    }

    :host([aria-selected="true"]) {
        background: ${go};
        color: ${wo};
    }

    :host(:hover) {
        background: ${bo};
        color: ${$o};
    }

    :host(:active) {
        background: ${mo};
        color: ${Co};
    }

    :host(:not([aria-selected="true"]):hover) {
        background: ${No};
        color: ${Zo};
    }

    :host(:not([aria-selected="true"]):active) {
        background: ${No};
        color: ${Zo};
    }

    :host([disabled]) {
        cursor: ${tn};
        opacity: ${yi};
    }

    :host([disabled]:hover) {
        background-color: inherit;
    }

    .content {
        grid-column-start: 2;
        justify-self: start;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .start,
    .end,
    ::slotted(svg) {
        display: flex;
    }

    ::slotted(svg) {
        /* TODO: adaptive typography https://github.com/microsoft/fast/issues/2432 */
        height: calc(${vi} * 4px);
        width: calc(${vi} * 4px);
    }

    ::slotted([slot="end"]) {
        margin-inline-start: 1ch;
    }

    ::slotted([slot="start"]) {
        margin-inline-end: 1ch;
    }

`.withBehaviors(on(at`
                :host {
                    border-color: transparent;
                    forced-color-adjust: none;
                    color: ${sn.ButtonText};
                    fill: currentcolor;
                }

                :host(:not([aria-selected="true"]):hover),
                :host([aria-selected="true"]) {
                    background: ${sn.Highlight};
                    color: ${sn.HighlightText};
                }

                :host([disabled]),
                :host([disabled]:not([aria-selected="true"]):hover) {
                    background: ${sn.Canvas};
                    color: ${sn.GrayText};
                    fill: currentcolor;
                    opacity: 1;
                }
            `)),Rr=(wr.compose({baseName:"option",template:Er,styles:Hr}),Hr),jr=wr.compose({baseName:"option",template:Er,styles:(t,e)=>at`
        ${Rr(t,e)}
    `});var zr;!function(t){t.vertical="vertical",t.horizontal="horizontal"}(zr||(zr={}));class _r extends qs{constructor(){super(...arguments),this.orientation=zr.horizontal,this.activeindicator=!0,this.showActiveIndicator=!0,this.prevActiveTabIndex=0,this.activeTabIndex=0,this.ticking=!1,this.change=()=>{this.$emit("change",this.activetab)},this.isDisabledElement=t=>"true"===t.getAttribute("aria-disabled"),this.isFocusableElement=t=>!this.isDisabledElement(t),this.setTabs=()=>{const t=this.isHorizontal()?"gridColumn":"gridRow";this.tabIds=this.getTabIds(),this.tabpanelIds=this.getTabPanelIds(),this.activeTabIndex=this.getActiveIndex(),this.showActiveIndicator=!1,this.tabs.forEach(((e,i)=>{if("tab"===e.slot&&this.isFocusableElement(e)){this.activeindicator&&(this.showActiveIndicator=!0);const t=this.tabIds[i],o=this.tabpanelIds[i];e.setAttribute("id","string"!=typeof t?`tab-${i+1}`:t),e.setAttribute("aria-selected",this.activeTabIndex===i?"true":"false"),e.setAttribute("aria-controls","string"!=typeof o?`panel-${i+1}`:o),e.addEventListener("click",this.handleTabClick),e.addEventListener("keydown",this.handleTabKeyDown),e.setAttribute("tabindex",this.activeTabIndex===i?"0":"-1"),this.activeTabIndex===i&&(this.activetab=e)}e.style[t]=`${i+1}`,this.isHorizontal()?e.classList.remove("vertical"):e.classList.add("vertical")}))},this.setTabPanels=()=>{this.tabIds=this.getTabIds(),this.tabpanelIds=this.getTabPanelIds(),this.tabpanels.forEach(((t,e)=>{const i=this.tabIds[e],o=this.tabpanelIds[e];t.setAttribute("id","string"!=typeof o?`panel-${e+1}`:o),t.setAttribute("aria-labelledby","string"!=typeof i?`tab-${e+1}`:i),this.activeTabIndex!==e?t.setAttribute("hidden",""):t.removeAttribute("hidden")}))},this.handleTabClick=t=>{const e=t.currentTarget;1===e.nodeType&&(this.prevActiveTabIndex=this.activeTabIndex,this.activeTabIndex=this.tabs.indexOf(e),this.setComponent())},this.handleTabKeyDown=t=>{const e=t.keyCode;if(this.isHorizontal())switch(e){case 37:t.preventDefault(),this.adjustBackward(t);break;case 39:t.preventDefault(),this.adjustForward(t)}else switch(e){case 38:t.preventDefault(),this.adjustBackward(t);break;case 40:t.preventDefault(),this.adjustForward(t)}switch(e){case 36:t.preventDefault(),this.adjust(-this.activeTabIndex);break;case 35:t.preventDefault(),this.adjust(this.tabs.length-this.activeTabIndex-1)}},this.adjustForward=t=>{const e=this.tabs;let i=0;for(i=this.activetab?e.indexOf(this.activetab)+1:1,i===e.length&&(i=0);i<e.length&&e.length>1;){if(this.isFocusableElement(e[i])){this.moveToTabByIndex(e,i);break}if(this.activetab&&i===e.indexOf(this.activetab))break;i+1>=e.length?i=0:i+=1}},this.adjustBackward=t=>{const e=this.tabs;let i=0;for(i=this.activetab?e.indexOf(this.activetab)-1:0,i=i<0?e.length-1:i;i>=0&&e.length>1;){if(this.isFocusableElement(e[i])){this.moveToTabByIndex(e,i);break}i-1<0?i=e.length-1:i-=1}},this.moveToTabByIndex=(t,e)=>{const i=t[e];this.activetab=i,this.prevActiveTabIndex=this.activeTabIndex,this.activeTabIndex=e,i.focus(),this.setComponent()}}activeidChanged(){this.$fastController.isConnected&&this.tabs.length<=this.tabpanels.length&&(this.setTabs(),this.setTabPanels(),this.handleActiveIndicatorPosition())}tabsChanged(){this.$fastController.isConnected&&this.tabs.length<=this.tabpanels.length&&(this.setTabs(),this.setTabPanels(),this.handleActiveIndicatorPosition())}tabpanelsChanged(){this.$fastController.isConnected&&this.tabpanels.length<=this.tabs.length&&(this.setTabs(),this.setTabPanels(),this.handleActiveIndicatorPosition())}getActiveIndex(){return void 0!==this.activeid?-1===this.tabIds.indexOf(this.activeid)?0:this.tabIds.indexOf(this.activeid):0}getTabIds(){return this.tabs.map((t=>t.getAttribute("id")))}getTabPanelIds(){return this.tabpanels.map((t=>t.getAttribute("id")))}setComponent(){this.activeTabIndex!==this.prevActiveTabIndex&&(this.activeid=this.tabIds[this.activeTabIndex],this.change(),this.setTabs(),this.handleActiveIndicatorPosition(),this.setTabPanels(),this.focusTab(),this.change())}isHorizontal(){return this.orientation===zr.horizontal}handleActiveIndicatorPosition(){this.showActiveIndicator&&this.activeindicator&&this.activeTabIndex!==this.prevActiveTabIndex&&(this.ticking?this.ticking=!1:(this.ticking=!0,this.animateActiveIndicator()))}animateActiveIndicator(){this.ticking=!0;const t=this.isHorizontal()?"gridColumn":"gridRow",e=this.isHorizontal()?"translateX":"translateY",i=this.isHorizontal()?"offsetLeft":"offsetTop",o=this.activeIndicatorRef[i];this.activeIndicatorRef.style[t]=`${this.activeTabIndex+1}`;const s=this.activeIndicatorRef[i];this.activeIndicatorRef.style[t]=`${this.prevActiveTabIndex+1}`;const n=s-o;this.activeIndicatorRef.style.transform=`${e}(${n}px)`,this.activeIndicatorRef.classList.add("activeIndicatorTransition"),this.activeIndicatorRef.addEventListener("transitionend",(()=>{this.ticking=!1,this.activeIndicatorRef.style[t]=`${this.activeTabIndex+1}`,this.activeIndicatorRef.style.transform=`${e}(0px)`,this.activeIndicatorRef.classList.remove("activeIndicatorTransition")}))}adjust(t){this.prevActiveTabIndex=this.activeTabIndex,this.activeTabIndex=Mn(0,this.tabs.length-1,this.activeTabIndex+t),this.setComponent()}focusTab(){this.tabs[this.activeTabIndex].focus()}connectedCallback(){super.connectedCallback(),this.tabIds=this.getTabIds(),this.tabpanelIds=this.getTabPanelIds(),this.activeTabIndex=this.getActiveIndex()}}o([K],_r.prototype,"orientation",void 0),o([K],_r.prototype,"activeid",void 0),o([N],_r.prototype,"tabs",void 0),o([N],_r.prototype,"tabpanels",void 0),o([K({mode:"boolean"})],_r.prototype,"activeindicator",void 0),o([N],_r.prototype,"activeIndicatorRef",void 0),o([N],_r.prototype,"showActiveIndicator",void 0),Es(_r,Ls);const qr=(t,e)=>As`
    <template class="${t=>t.orientation}">
        ${Bs}
        <div class="tablist" part="tablist" role="tablist">
            <slot class="tab" name="tab" part="tab" ${Zs("tabs")}></slot>

            ${function(t,e){const i="function"==typeof e?e:()=>e;return(t,e)=>t.showActiveIndicator?i(t,e):null}(0,As`
                    <div
                        ${Ps("activeIndicatorRef")}
                        class="activeIndicator"
                        part="activeIndicator"
                    ></div>
                `)}
        </div>
        ${Ms}
        <div class="tabpanel">
            <slot name="tabpanel" part="tabpanel" ${Zs("tabpanels")}></slot>
        </div>
    </template>
`;class Gr extends qs{}o([K({mode:"boolean"})],Gr.prototype,"disabled",void 0);const Ur=(t,e)=>As`
    <template slot="tab" role="tab" aria-disabled="${t=>t.disabled}">
        <slot></slot>
    </template>
`,Wr=(t,e)=>As`
    <template slot="tabpanel" role="tabpanel">
        <slot></slot>
    </template>
`,Kr=(t,e)=>at`
        ${nn("grid")} :host {
            box-sizing: border-box;
            font-family: ${pi};
            font-size: ${$i};
            line-height: ${Ci};
            color: ${Zo};
            grid-template-columns: auto 1fr auto;
            grid-template-rows: auto 1fr;
        }

        .tablist {
            display: grid;
            grid-template-rows: auto auto;
            grid-template-columns: auto;
            position: relative;
            width: max-content;
            align-self: end;
            padding: calc(${vi} * 4px) calc(${vi} * 4px) 0;
            box-sizing: border-box;
        }

        .start,
        .end {
            align-self: center;
        }

        .activeIndicator {
            grid-row: 2;
            grid-column: 1;
            width: 100%;
            height: 5px;
            justify-self: center;
            background: ${go};
            margin-top: 10px;
            border-radius: calc(${bi} * 1px)
                calc(${bi} * 1px) 0 0;
        }

        .activeIndicatorTransition {
            transition: transform 0.2s ease-in-out;
        }

        .tabpanel {
            grid-row: 2;
            grid-column-start: 1;
            grid-column-end: 4;
            position: relative;
        }

        :host([orientation="vertical"]) {
            grid-template-rows: auto 1fr auto;
            grid-template-columns: auto 1fr;
        }

        :host([orientation="vertical"]) .tablist {
            grid-row-start: 2;
            grid-row-end: 2;
            display: grid;
            grid-template-rows: auto;
            grid-template-columns: auto 1fr;
            position: relative;
            width: max-content;
            justify-self: end;
            width: 100%;
            padding: calc((${yn} - ${vi}) * 1px)
                calc(${vi} * 4px) calc((${yn} - ${vi}) * 1px) 0;
        }

        :host([orientation="vertical"]) .tabpanel {
            grid-column: 2;
            grid-row-start: 1;
            grid-row-end: 4;
        }

        :host([orientation="vertical"]) .end {
            grid-row: 3;
        }

        :host([orientation="vertical"]) .activeIndicator {
            grid-column: 1;
            grid-row: 1;
            width: 5px;
            height: 100%;
            margin-inline-end: 10px;
            align-self: center;
            background: ${go};
            margin-top: 0;
            border-radius: 0 calc(${bi} * 1px)
                calc(${bi} * 1px) 0;
        }

        :host([orientation="vertical"]) .activeIndicatorTransition {
            transition: transform 0.2s linear;
        }
    `.withBehaviors(on(at`
                .activeIndicator,
                :host([orientation="vertical"]) .activeIndicator {
                    forced-color-adjust: none;
                    background: ${sn.Highlight};
                }
            `)),Yr=(_r.compose({baseName:"tabs",template:qr,styles:Kr}),Kr),Qr=(t,e)=>at`
    ${nn("inline-flex")} :host {
        box-sizing: border-box;
        font-family: ${pi};
        font-size: ${$i};
        line-height: ${Ci};
        height: calc(${yn} * 1px);
        padding: calc(${vi} * 5px) calc(${vi} * 4px);
        color: ${Qo};
        fill: currentcolor;
        border-radius: calc(${bi} * 1px);
        border: calc(${xi} * 1px) solid transparent;
        align-items: center;
        justify-content: center;
        grid-row: 1;
        cursor: pointer;
    }

    :host(:hover) {
        color: ${Zo};
        fill: currentcolor;
    }

    :host(:active) {
        color: ${Zo};
        fill: currentcolor;
    }

    :host([disabled]) {
        cursor: ${tn};
        opacity: ${yi};
    }

    :host([disabled]:hover) {
        color: ${Qo};
        background: ${Ro};
    }

    :host([aria-selected="true"]) {
        background: ${Ao};
        color: ${Vo};
        fill: currentcolor;
    }

    :host([aria-selected="true"]:hover) {
        background: ${No};
        color: ${Oo};
        fill: currentcolor;
    }

    :host([aria-selected="true"]:active) {
        background: ${Po};
        color: ${Fo};
        fill: currentcolor;
    }

    :host(:${vn}) {
        outline: none;
        border: calc(${xi} * 1px) solid ${Uo};
        box-shadow: 0 0 0 calc((${wi} - ${xi}) * 1px)
            ${Uo};
    }

    :host(:focus) {
        outline: none;
    }

    :host(.vertical) {
        justify-content: end;
        grid-column: 2;
    }

    :host(.vertical[aria-selected="true"]) {
        z-index: 2;
    }

    :host(.vertical:hover) {
        color: ${Zo};
    }

    :host(.vertical:active) {
        color: ${Zo};
    }

    :host(.vertical:hover[aria-selected="true"]) {
    }
`.withBehaviors(on(at`
            :host {
                forced-color-adjust: none;
                border-color: transparent;
                color: ${sn.ButtonText};
                fill: currentcolor;
            }
            :host(:hover),
            :host(.vertical:hover),
            :host([aria-selected="true"]:hover) {
                background: ${sn.Highlight};
                color: ${sn.HighlightText};
                fill: currentcolor;
            }
            :host([aria-selected="true"]) {
                background: ${sn.HighlightText};
                color: ${sn.Highlight};
                fill: currentcolor;
            }
            :host(:${vn}) {
                border-color: ${sn.ButtonText};
                box-shadow: none;
            }
            :host([disabled]),
            :host([disabled]:hover) {
                opacity: 1;
                color: ${sn.GrayText};
                background: ${sn.ButtonFace};
            }
        `)),Xr=(Gr.compose({baseName:"tab",template:Ur,styles:Qr}),Qr),Zr=(t,e)=>at`
    ${nn("flex")} :host {
        box-sizing: border-box;
        font-size: ${$i};
        line-height: ${Ci};
        padding: 0 calc((6 + (${vi} * 2 * ${mi})) * 1px);
    }
`,Jr=(class extends qs{}.compose({baseName:"tab-panel",template:Wr,styles:Zr}),Zr),ta=_r.compose({baseName:"tabs",template:qr,styles:(t,e)=>at`
        ${Yr(t,e)}

        .tablist {
            padding: 0;
        }

        .activeIndicator {
            border-radius: 0;
            margin-top: 0;
        }
    `}),ea=Gr.compose({baseName:"tab",template:Ur,styles:(t,e)=>at`
        ${Xr(t,e)}

        :host([aria-selected="true"]) {
            background: transparent;
        }
    `}),ia=_r.compose({baseName:"tab-panel",template:Wr,styles:(t,e)=>at`
        ${Jr(t,e)}

        :host {
            margin-top: calc(${Pn} * 1px);
            padding: 0;
        }
    `});function oa(t){return ei.from(Qe.from(Ue(t)))}const sa=oa(Nn.white),na=oa(Nn.black),ra=(oa(Nn.brand.yellow),oa(Nn.brand.salmon),oa(Nn.brand.fuchsia),oa(Nn.brand.purple),oa(Nn.brand.violet),oa(Nn.brand.blue));function aa(t){pi.withDefault(Dn.font.default),$i.withDefault(Dn.ramp.base.fontSize),Ci.withDefault(Dn.ramp.base.lineHeight),bi.withDefault(4),vt.create("heading-font").withDefault(Dn.font.heading),vt.create("base-padding").withDefault("1rem"),vt.create("base-margin").withDefault(Pn),"dark"===t.theme?(eo.withDefault(na),io.withDefault(sa),gi.withDefault(hi.DarkMode),uo.setValueFor(document.body,ao)):(eo.withDefault(sa),io.withDefault(ra),gi.withDefault(hi.LightMode),uo.setValueFor(document.body,ao)),ae.getOrCreate(t.element).withPrefix("pulumi").register(On(),...t.components)}oa(Nn.red[500]),oa(Nn.gray[500]),oa(Nn.orange[500]),oa(Nn.green[500])}},i={};function o(t){var s=i[t];if(void 0!==s)return s.exports;var n=i[t]={exports:{}};return e[t](n,n.exports,o),n.exports}o.d=(t,e)=>{for(var i in e)o.o(e,i)&&!o.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(0,(t=o(997)).initDesignSystem)({prefix:"pulumi",components:[(0,t.disclosure)()]})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,